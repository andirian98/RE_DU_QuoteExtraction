<Activity mc:Ignorable="sap sap2010" x:Class="Main" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:p="http://schemas.uipath.com/workflow/activities/intelligentocr" xmlns:p1="http://schemas.uipath.com/workflow/activities/intelligentocr/classification" xmlns:p2="http://schemas.uipath.com/workflow/activities/document-processing-contracts/classification" xmlns:p3="http://schemas.uipath.com/workflow/activities/document-processing-contracts/dom" xmlns:p4="http://schemas.uipath.com/workflow/activities/intelligentocr/extraction" xmlns:p5="http://schemas.uipath.com/workflow/activities/document-processing-contracts/results" xmlns:p6="http://schemas.uipath.com/workflow/activities/document-processing-contracts/extraction" xmlns:p7="http://schemas.uipath.com/workflow/activities/documentunderstanding-ml" xmlns:p8="http://schemas.uipath.com/workflow/activities/intelligentocr/training" xmlns:p9="http://schemas.uipath.com/workflow/activities/document-processing-contracts/taxonomy" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing.Common" xmlns:sd1="clr-namespace:System.Drawing;assembly=System.Drawing.Primitives" xmlns:sd2="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:ue="clr-namespace:UiPath.Excel;assembly=UiPath.Excel.Activities" xmlns:ueab="clr-namespace:UiPath.Excel.Activities.Business;assembly=UiPath.Excel.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uix="http://schemas.uipath.com/workflow/activities/uix" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_file_input" Type="InArgument(x:String)" />
    <x:Property Name="in_file_output" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1240,3159</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="67">
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Core.Activities.OCR.Engines</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Classification</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.DataExtraction</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Dom</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Results</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Taxonomy</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Training</x:String>
      <x:String>UiPath.DocumentUnderstanding.ML.Activities</x:String>
      <x:String>UiPath.DocumentUnderstanding.ML.Activities.Editors</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.DataExtraction</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.Digitization</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.DocumentClassification</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.TaxonomyManagement</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.Training</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.ValidationStation</x:String>
      <x:String>UiPath.OCR.Activities</x:String>
      <x:String>UiPath.OCR.Contracts</x:String>
      <x:String>UiPath.OCR.Contracts.Activities</x:String>
      <x:String>UiPath.OmniPage.Activities</x:String>
      <x:String>UiPath.PDF.Activities</x:String>
      <x:String>UiPath.PDF.Activities.PDF</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.SmartData.PositionBasedExtraction.Storage</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.UIAutomationNext.Contracts</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.Vision.Core.OCR</x:String>
      <x:String>UiPath.Vision.OCR</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="144">
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Private.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices.RuntimeInformation</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>UiPath.DocumentProcessing.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.DocumentUnderstanding.ML.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.SmartData.PositionBasedExtraction</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Vision.Core</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldCollapseAll">False</x:Boolean>
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence DisplayName="DU Training" sap:VirtualizedContainerService.HintSize="558,3094" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="s:String[]" Name="paths" />
      <Variable x:TypeArguments="x:String" Default="C:\Users\Admin\Documents\UiPath\Use Case V - Quote Extraction\DocumentUnderstandingFramework_Windows\DocumentProcessing\Documents" Name="root_folder" />
      <Variable x:TypeArguments="p9:DocumentTaxonomy" Name="taxonomy" />
      <Variable x:TypeArguments="x:String" Name="docName" />
      <Variable x:TypeArguments="p3:Document" Name="dom" />
      <Variable x:TypeArguments="x:String" Name="documentText" />
      <Variable x:TypeArguments="p5:ClassificationResult[]" Name="validatedClassificationResult" />
      <Variable x:TypeArguments="p5:ClassificationResult[]" Name="classificationResult" />
      <Variable x:TypeArguments="p5:ExtractionResult" Name="extractionResult" />
      <Variable x:TypeArguments="x:Int32" Name="pageCount" />
      <Variable x:TypeArguments="sd2:DataSet" Name="dataSet" />
      <Variable x:TypeArguments="x:Int32" Name="count" />
      <Variable x:TypeArguments="p5:ExtractionResult" Name="validatedExtractionResult" />
      <Variable x:TypeArguments="x:Boolean" Name="validationStationError" />
      <Variable x:TypeArguments="x:String" Default="C:\Users\Admin\Documents\UiPath\Use Case V - Quote Extraction\DocumentUnderstandingFramework_Windows\DocumentProcessing\Outputs\PO Format.xlsx" Name="output_file" />
      <Variable x:TypeArguments="x:Int32" Default="0" Name="row_count" />
      <Variable x:TypeArguments="x:String" Name="total_Value" />
      <Variable x:TypeArguments="sd2:DataSet" Name="outputData" />
      <Variable x:TypeArguments="x:Int32" Name="initial_rows" />
      <Variable x:TypeArguments="x:String" Name="curr_type" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <p:LoadTaxonomy DisplayName="Load Taxonomy" sap:VirtualizedContainerService.HintSize="516,104" sap2010:WorkflowViewState.IdRef="LoadTaxonomy_2" Taxonomy="[taxonomy]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </p:LoadTaxonomy>
    <Assign sap:VirtualizedContainerService.HintSize="516,82" sap2010:WorkflowViewState.IdRef="Assign_19">
      <Assign.To>
        <OutArgument x:TypeArguments="x:String">[docName]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:String">[System.IO.Path.GetFileNameWithoutExtension(in_file_input)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_file_output.Split(&quot;.&quot;c)(0).ToString + &quot;_&quot; + docName + &quot;.xlsx&quot;]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="516,154" sap2010:WorkflowViewState.IdRef="CopyFile_2" Path="[in_file_output]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CopyFile>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="516,92" sap2010:WorkflowViewState.IdRef="LogMessage_33" Level="Info" Message="[&quot;Start processing document &lt;&quot; + docName+ &quot;&gt;&quot;]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
    <Sequence DisplayName="Digitization" sap:VirtualizedContainerService.HintSize="516,81" sap2010:WorkflowViewState.IdRef="Sequence_34">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="388,92" sap2010:WorkflowViewState.IdRef="LogMessage_34" Level="Info" Message="[&quot;Digitizing document &lt;&quot; + docName+ &quot;&gt;&quot;]">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:LogMessage>
      <p:DigitizeDocument ApplyOcrMigrated="True" ApplyOcrOnPdf="Auto" DegreeOfParallelism="1" DetectCheckboxes="True" DisplayName="Digitize Document" DocumentObjectModel="[dom]" DocumentPath="[in_file_input.ToString]" DocumentText="[documentText]" ForceApplyOCR="False" sap:VirtualizedContainerService.HintSize="388,297" sap2010:WorkflowViewState.IdRef="DigitizeDocument_4">
        <p:DigitizeDocument.OCREngine>
          <ActivityFunc x:TypeArguments="sd:Image, x:String, scg:IEnumerable(scg:KeyValuePair(sd1:Rectangle, x:String))">
            <ActivityFunc.Argument1>
              <DelegateInArgument x:TypeArguments="sd:Image" Name="Image" />
            </ActivityFunc.Argument1>
            <ActivityFunc.Argument2>
              <DelegateInArgument x:TypeArguments="x:String" Name="PredictionId" />
            </ActivityFunc.Argument2>
            <ui:GoogleOCR AllowedCharacters="{x:Null}" DeniedCharacters="{x:Null}" FilterRegion="{x:Null}" Invert="{x:Null}" Language="{x:Null}" Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" Text="{x:Null}" ComputeSkewAngle="False" DisplayName="Tesseract OCR" ExtractWords="True" sap:VirtualizedContainerService.HintSize="312,25" sap2010:WorkflowViewState.IdRef="GoogleOCR_4" Image="[Image]" PredictionId="[PredictionId]" />
          </ActivityFunc>
        </p:DigitizeDocument.OCREngine>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </p:DigitizeDocument>
    </Sequence>
    <Sequence DisplayName="Classification" sap:VirtualizedContainerService.HintSize="516,81" sap2010:WorkflowViewState.IdRef="Sequence_35">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="478,92" sap2010:WorkflowViewState.IdRef="LogMessage_35" Level="Info" Message="[&quot;Classifying document &lt;&quot; + docName+ &quot;&gt;&quot;]">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:LogMessage>
      <p1:ClassifyDocumentScope ClassificationResults="[classificationResult]" DisplayName="Classify Document Scope" DocumentObjectModel="[dom]" DocumentPath="[in_file_input.ToString]" DocumentText="[documentText]" sap:VirtualizedContainerService.HintSize="478,436" sap2010:WorkflowViewState.IdRef="ClassifyDocumentScope_4" Taxonomy="[taxonomy]" TaxonomyConfiguration="{}{&quot;TaxonomyMappings&quot;:{&quot;UI5cd201626d5e4aefb234c3dca9b4394b&quot;:{&quot;DocumentTypeMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction&quot;:{&quot;OriginalDocumentTypeId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction&quot;,&quot;ClassifierDocumentTypeId&quot;:&quot;&quot;,&quot;IsDocumentTypeIdMapped&quot;:true}}}},&quot;ClassifierMinimumConfidence&quot;:{&quot;UI5cd201626d5e4aefb234c3dca9b4394b&quot;:&quot;60&quot;},&quot;DocumentTypesByPersistenceId&quot;:{}}">
        <p1:ClassifyDocumentScope.Classifiers>
          <p1:KeywordBasedClassifier HumanValidatedData="{x:Null}" LearningData="{x:Null}" DisplayName="Keyword Based Classifier" sap:VirtualizedContainerService.HintSize="234,114" sap2010:WorkflowViewState.IdRef="KeywordBasedClassifier_4" LearningFilePath="DocumentProcessing\classifier.json" PersistenceId="UI5cd201626d5e4aefb234c3dca9b4394b">
            <p1:KeywordBasedClassifier.ClassifierResult>
              <OutArgument x:TypeArguments="p2:ClassifierResult">
                <DelegateArgumentReference x:TypeArguments="p2:ClassifierResult">
                  <DelegateOutArgument x:TypeArguments="p2:ClassifierResult" Name="ClassifierResult" />
                </DelegateArgumentReference>
              </OutArgument>
            </p1:KeywordBasedClassifier.ClassifierResult>
            <p1:KeywordBasedClassifier.DocumentObjectModel>
              <InArgument x:TypeArguments="p3:Document">
                <DelegateArgumentValue x:TypeArguments="p3:Document">
                  <DelegateInArgument x:TypeArguments="p3:Document" Name="DocumentObjectModel" />
                </DelegateArgumentValue>
              </InArgument>
            </p1:KeywordBasedClassifier.DocumentObjectModel>
            <p1:KeywordBasedClassifier.DocumentPath>
              <InArgument x:TypeArguments="x:String">
                <DelegateArgumentValue x:TypeArguments="x:String">
                  <DelegateInArgument x:TypeArguments="x:String" Name="DocumentPath" />
                </DelegateArgumentValue>
              </InArgument>
            </p1:KeywordBasedClassifier.DocumentPath>
            <p1:KeywordBasedClassifier.DocumentText>
              <InArgument x:TypeArguments="x:String">
                <DelegateArgumentValue x:TypeArguments="x:String">
                  <DelegateInArgument x:TypeArguments="x:String" Name="DocumentText" />
                </DelegateArgumentValue>
              </InArgument>
            </p1:KeywordBasedClassifier.DocumentText>
            <p1:KeywordBasedClassifier.DocumentTypes>
              <InArgument x:TypeArguments="p2:ClassifierDocumentType[]">
                <DelegateArgumentValue x:TypeArguments="p2:ClassifierDocumentType[]">
                  <DelegateInArgument x:TypeArguments="p2:ClassifierDocumentType[]" Name="DocumentTypes" />
                </DelegateArgumentValue>
              </InArgument>
            </p1:KeywordBasedClassifier.DocumentTypes>
            <p1:KeywordBasedClassifier.PredictionId>
              <InArgument x:TypeArguments="x:String">
                <DelegateArgumentValue x:TypeArguments="x:String">
                  <DelegateInArgument x:TypeArguments="x:String" Name="PredictionId" />
                </DelegateArgumentValue>
              </InArgument>
            </p1:KeywordBasedClassifier.PredictionId>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </p1:KeywordBasedClassifier>
        </p1:ClassifyDocumentScope.Classifiers>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </p1:ClassifyDocumentScope>
      <p1:PresentClassificationStation AutomaticClassificationResults="[classificationResult]" DisplayName="Present Classification Station" DocumentObjectModel="[dom]" DocumentPath="[in_file_input.ToString]" DocumentText="[documentText]" sap:VirtualizedContainerService.HintSize="478,366" sap2010:WorkflowViewState.IdRef="PresentClassificationStation_4" Taxonomy="[taxonomy]" ValidatedClassificationResults="[validatedClassificationResult]">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsPinned">False</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </p1:PresentClassificationStation>
    </Sequence>
    <If Condition="[validatedClassificationResult.any]" DisplayName="If - Data Extraction" sap:VirtualizedContainerService.HintSize="516,650" sap2010:WorkflowViewState.IdRef="If_6">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="376,288" sap2010:WorkflowViewState.IdRef="Sequence_36">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,92" sap2010:WorkflowViewState.IdRef="LogMessage_36" Level="Info" Message="[&quot;Extracting data from document &lt;&quot; + docName+ &quot;&gt;&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
          <p4:DataExtractionScope DocumentTypeId="{x:Null}" ClassificationResult="[classificationResult(0)]" DisplayName="Data Extraction Scope" DocumentObjectModel="[dom]" DocumentPath="[in_file_input.ToString]" DocumentText="[documentText]" ExtractionResult="[extractionResult]" FormatValuesIfPossible="True" sap:VirtualizedContainerService.HintSize="334,68" sap2010:WorkflowViewState.IdRef="DataExtractionScope_4" Taxonomy="[taxonomy]" TaxonomyConfiguration="{}{&quot;TaxonomyMappings&quot;:{&quot;UI5908d636906e49899635e7682a9cbe3d&quot;:{&quot;DocumentTypeMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction&quot;:{&quot;FieldMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true}},&quot;ExtractorDocumentTypeId&quot;:null}}},&quot;UI6c1273107999471c892e6d5075951767&quot;:{&quot;DocumentTypeMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction&quot;:{&quot;FieldMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:true}},&quot;ExtractorDocumentTypeId&quot;:null}}},&quot;UIf98fdf5cd25a4bbbb882693764a8b8ef&quot;:{&quot;DocumentTypeMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction&quot;:{&quot;FieldMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;po-number\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;currency\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;vendor-name\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;net-amount\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;items\&quot;&quot;,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;description\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;quantity\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;unit-measure\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;\&quot;&quot;,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;unit-price\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;line-net-amount\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;line-amount\&quot;&quot;,&quot;ShouldExtract&quot;:true}},&quot;ExtractorDocumentTypeId&quot;:&quot;\&quot;\&quot;&quot;}}},&quot;UI4af5231995624736b7dbd7751dd762e9&quot;:{&quot;DocumentTypeMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction&quot;:{&quot;FieldMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;po-no\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;currency\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;name\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;net-amount\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;items\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;description\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;quantity\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;unit-price\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;line-amount\&quot;&quot;,&quot;ShouldExtract&quot;:false}},&quot;ExtractorDocumentTypeId&quot;:&quot;\&quot;\&quot;&quot;}}},&quot;UI434ebd49424f4b12a74820968b6188d3&quot;:{&quot;DocumentTypeMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction&quot;:{&quot;FieldMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;po-no\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;currency\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;total\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;items\&quot;&quot;,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;description\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;quantity\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:&quot;\&quot;unit-price\&quot;&quot;,&quot;ShouldExtract&quot;:true},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false},&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;:{&quot;OriginalTaxonomyFieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;,&quot;ExtractorTaxonomyFieldId&quot;:null,&quot;ShouldExtract&quot;:false}},&quot;ExtractorDocumentTypeId&quot;:&quot;\&quot;\&quot;&quot;}}}},&quot;ExtractorMinimumConfidence&quot;:{&quot;UI5908d636906e49899635e7682a9cbe3d&quot;:&quot;20&quot;,&quot;UI434ebd49424f4b12a74820968b6188d3&quot;:&quot;100&quot;,&quot;UI6c1273107999471c892e6d5075951767&quot;:&quot;20&quot;,&quot;UIf98fdf5cd25a4bbbb882693764a8b8ef&quot;:&quot;20&quot;,&quot;UI4af5231995624736b7dbd7751dd762e9&quot;:&quot;100&quot;},&quot;ExtractorsAliases&quot;:{},&quot;DocumentTypeOptionsByExtractor&quot;:{&quot;UI6c1273107999471c892e6d5075951767&quot;:[],&quot;UIf98fdf5cd25a4bbbb882693764a8b8ef&quot;:[{&quot;FieldId&quot;:&quot;&quot;,&quot;SubOptions&quot;:[{&quot;FieldId&quot;:&quot;po-number&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;date&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;client-name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;client-address&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;vendor-name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;vendor-address&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;shipping-name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;shipping-address&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;billing-name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;billing-address&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;payment-terms&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;delivery-by-date&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;discount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;net-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;tax-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;tax-rate&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;total-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;client-vat-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;currency&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;items&quot;,&quot;SubOptions&quot;:[{&quot;FieldId&quot;:&quot;line-number&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;description&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;product-code&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;delivery-date&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;unit-measure&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;unit-price&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;quantity&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;line-net-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;line-tax-rate&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;line-tax-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;line-amount&quot;,&quot;SubOptions&quot;:null}]}]}],&quot;UI5908d636906e49899635e7682a9cbe3d&quot;:[],&quot;UI4af5231995624736b7dbd7751dd762e9&quot;:[{&quot;FieldId&quot;:&quot;&quot;,&quot;SubOptions&quot;:[{&quot;FieldId&quot;:&quot;name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;vendor-addr&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;billing-name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;billing-addr&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;shipping-addr&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;invoice-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;po-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;vendor-vat-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;date&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;tax&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;total&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;payment-terms&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;net-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;due-date&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;discount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;shipping-charges&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;payment-addr&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;billing-vat-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;currency&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;items&quot;,&quot;SubOptions&quot;:[{&quot;FieldId&quot;:&quot;description&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;quantity&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;unit-price&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;line-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;item-po-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;line-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;part-no&quot;,&quot;SubOptions&quot;:null}]}]}],&quot;UI434ebd49424f4b12a74820968b6188d3&quot;:[{&quot;FieldId&quot;:&quot;&quot;,&quot;SubOptions&quot;:[{&quot;FieldId&quot;:&quot;name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;vendor-addr&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;billing-name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;billing-addr&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;shipping-addr&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;invoice-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;po-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;date&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;tax&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;total&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;payment-terms&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;net-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;due-date&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;shipping-charges&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;payment-addr&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;abn&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;bsb&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;account-name&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;account-number&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;currency&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;items&quot;,&quot;SubOptions&quot;:[{&quot;FieldId&quot;:&quot;description&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;quantity&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;unit-price&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;line-amount&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;item-po-no&quot;,&quot;SubOptions&quot;:null},{&quot;FieldId&quot;:&quot;line-no&quot;,&quot;SubOptions&quot;:null}]}]}]}}">
            <p4:DataExtractionScope.Extractors>
              <p4:RegexBasedExtractor Configuration="[&quot;[{&quot;&quot;DocumentTypeId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction&quot;&quot;,&quot;&quot;FieldConfiguration&quot;&quot;:[{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;((((?&lt;=QUOTE NUMBER ).*)+))&quot;&quot;,&quot;&quot;Options&quot;&quot;:1,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;(((?&lt;=QUOTE NUMBER ).*)+)\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;1\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;EXT\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;Exactly\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;(((?&lt;=Currency ).*)+)&quot;&quot;,&quot;&quot;Options&quot;&quot;:0,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;((?&lt;=Currency ).*)\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;+\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;OOM\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;At least one (1 or more)\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;(((?&lt;=End-user )+(.|\\n)*(?=name:))+)&quot;&quot;,&quot;&quot;Options&quot;&quot;:2,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;((?&lt;=End-user )+(.|\\\\n)*(?=name:))\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;+\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;OOM\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;At least one (1 or more)\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;(((?&lt;=Net Total Product and Services ).*)|((?&lt;=Net Total Software and Services ).*)+)&quot;&quot;,&quot;&quot;Options&quot;&quot;:0,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;((?&lt;=Net Total Product and Services ).*)|((?&lt;=Net Total Software and Services ).*)\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;+\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;OOM\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;At least one (1 or more)\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},{&quot;&quot;RowConfiguration&quot;&quot;:{&quot;&quot;Expression&quot;&quot;:&quot;&quot;(((?=UiPath -)+(.|\\n)*(?&lt;=(Standard)|(NonProduction)|(Runtime)|(- Node Locked))))&quot;&quot;,&quot;&quot;Options&quot;&quot;:2,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;((?=UiPath -)+(.|\\\\n)*(?&lt;=(Standard)|(NonProduction)|(Runtime)|(- Node Locked)))\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;1\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;EXT\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;Exactly\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},&quot;&quot;ColumnConfigurations&quot;&quot;:[{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;(\\d{0,3})&quot;&quot;,&quot;&quot;Options&quot;&quot;:16,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;\\\\d{0,3}\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;1\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;EXT\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;Exactly\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;((0[1-9]|1[012])|(\\d))[- /.]((0\\d{0,2})|(\\d{0,2}))[- /.](\\d{0,4})+&quot;&quot;,&quot;&quot;Options&quot;&quot;:16,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:false,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;((0[1-9]|1[012])|(\\\\d))[- \\/.]((0\\\\d{0,2})|(\\\\d{0,2}))[- \\/.](\\\\d{0,4})\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;+\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;OOM\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;At least one (1 or more)\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;((0[1-9]|1[012])|(\\d))[- /.]((0\\d{0,2})|(\\d{0,2}))[- /.](\\d{0,4})+&quot;&quot;,&quot;&quot;Options&quot;&quot;:16,&quot;&quot;Model&quot;&quot;:null},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;\\$(\\d+(\\,\\d+)*)(\\d(\\.\\d+))+&quot;&quot;,&quot;&quot;Options&quot;&quot;:16,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:false,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;\\\\$(\\\\d+(\\\\,\\\\d+)*)(\\\\d(\\\\.\\\\d+))\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;+\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;OOM\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;At least one (1 or more)\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;(\\$(\\d+(\\,\\d+)*)(\\d(\\.\\d+))+)&quot;&quot;,&quot;&quot;Options&quot;&quot;:16,&quot;&quot;Model&quot;&quot;:null},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;(\\$(\\d+(\\,\\d+)*)(\\d(\\.\\d+))+)&quot;&quot;,&quot;&quot;Options&quot;&quot;:16,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;\\\\$(\\\\d+(\\\\,\\\\d+)*)(\\\\d(\\\\.\\\\d+))\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;+\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;OOM\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;At least one (1 or more)\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;},{&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;(\\$(\\d+(\\,\\d+)*)(\\d(\\.\\d+))+)&quot;&quot;,&quot;&quot;Options&quot;&quot;:16,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;\\\\$(\\\\d+(\\\\,\\\\d+)*)(\\\\d(\\\\.\\\\d+))\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;+\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;OOM\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;At least one (1 or more)\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;}],&quot;&quot;FieldId&quot;&quot;:&quot;&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;&quot;,&quot;&quot;Expression&quot;&quot;:&quot;&quot;(((?&lt;=C. Software and Service Pricing Detail)+(.|\\n)*(?=Net Total Software and Services))|((?&lt;=C. Product and Service Pricing Detail)+(.|\\n)*(?=Net Total Product and Services)))&quot;&quot;,&quot;&quot;Options&quot;&quot;:2,&quot;&quot;Model&quot;&quot;:&quot;&quot;{\&quot;&quot;Parts\&quot;&quot;:[{\&quot;&quot;Capture\&quot;&quot;:true,\&quot;&quot;Index\&quot;&quot;:0,\&quot;&quot;OperationID\&quot;&quot;:\&quot;&quot;ADV\&quot;&quot;,\&quot;&quot;OperationName\&quot;&quot;:\&quot;&quot;Advanced\&quot;&quot;,\&quot;&quot;OperationValue\&quot;&quot;:\&quot;&quot;((?&lt;=C. Software and Service Pricing Detail)+(.|\\\\n)*(?=Net Total Software and Services))|((?&lt;=C. Product and Service Pricing Detail)+(.|\\\\n)*(?=Net Total Product and Services))\&quot;&quot;,\&quot;&quot;QuantifierFirstValue\&quot;&quot;:\&quot;&quot;1\&quot;&quot;,\&quot;&quot;QuantifierID\&quot;&quot;:\&quot;&quot;EXT\&quot;&quot;,\&quot;&quot;QuantifierName\&quot;&quot;:\&quot;&quot;Exactly\&quot;&quot;,\&quot;&quot;QuantifierSecondValue\&quot;&quot;:null}],\&quot;&quot;Version\&quot;&quot;:2}&quot;&quot;}]}]&quot;]" DisplayName="Regex Based Extractor" sap:VirtualizedContainerService.HintSize="234,193" sap2010:WorkflowViewState.IdRef="RegexBasedExtractor_1" PersistenceId="UI5908d636906e49899635e7682a9cbe3d" Timeout="2000" UseVisualAlignment="False">
                <p4:RegexBasedExtractor.DocumentBounds>
                  <InArgument x:TypeArguments="p5:ResultsDocumentBounds">
                    <DelegateArgumentValue x:TypeArguments="p5:ResultsDocumentBounds">
                      <DelegateInArgument x:TypeArguments="p5:ResultsDocumentBounds" Name="DocumentBounds" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:RegexBasedExtractor.DocumentBounds>
                <p4:RegexBasedExtractor.DocumentObjectModel>
                  <InArgument x:TypeArguments="p3:Document">
                    <DelegateArgumentValue x:TypeArguments="p3:Document">
                      <DelegateInArgument x:TypeArguments="p3:Document" Name="DocumentObjectModel" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:RegexBasedExtractor.DocumentObjectModel>
                <p4:RegexBasedExtractor.DocumentPath>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentPath" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:RegexBasedExtractor.DocumentPath>
                <p4:RegexBasedExtractor.DocumentText>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentText" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:RegexBasedExtractor.DocumentText>
                <p4:RegexBasedExtractor.ExtractorDocumentType>
                  <InArgument x:TypeArguments="p6:ExtractorDocumentType">
                    <DelegateArgumentValue x:TypeArguments="p6:ExtractorDocumentType">
                      <DelegateInArgument x:TypeArguments="p6:ExtractorDocumentType" Name="ExtractorDocumentType" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:RegexBasedExtractor.ExtractorDocumentType>
                <p4:RegexBasedExtractor.ExtractorResult>
                  <OutArgument x:TypeArguments="p6:ExtractorResult">
                    <DelegateArgumentReference x:TypeArguments="p6:ExtractorResult">
                      <DelegateOutArgument x:TypeArguments="p6:ExtractorResult" Name="ExtractorResult" />
                    </DelegateArgumentReference>
                  </OutArgument>
                </p4:RegexBasedExtractor.ExtractorResult>
                <p4:RegexBasedExtractor.PredictionId>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="PredictionId" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:RegexBasedExtractor.PredictionId>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </p4:RegexBasedExtractor>
              <p4:FormExtractor SerializedSignatureFields="{x:Null}" ApiKey="kSVgKX8zjY9nYlfF9ti4S88YmcHAXWOsgAg8GEHuJjv+oW0wGXxi1GNcxx8z7X/57XaYrnOo0glZonEWrW256Q==" DisplayName="Form Extractor" Endpoint="https://formextractor.uipath.com/" sap:VirtualizedContainerService.HintSize="234,193" sap2010:WorkflowViewState.IdRef="FormExtractor_4" MinOverlapPercentage="65" PersistenceId="UI6c1273107999471c892e6d5075951767" SerializedSettings="{}{}" SerializedTemplates="[{&quot;DocumentTypeId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction&quot;,&quot;FormId&quot;:&quot;d0e71969&quot;,&quot;FormName&quot;:&quot;Templlate PO&quot;,&quot;OriginalFileExtension&quot;:&quot;pdf&quot;,&quot;Pages&quot;:[{&quot;Page&quot;:0,&quot;Size&quot;:[0.0,0.0,612.0,792.0],&quot;SkewAngle&quot;:0.0,&quot;Evidence&quot;:[{&quot;Text&quot;:&quot;Billing&quot;,&quot;Box&quot;:[150.21,53.89,42.78,16.66]},{&quot;Text&quot;:&quot;Information&quot;,&quot;Box&quot;:[150.21,100.55,77.0,16.66]},{&quot;Text&quot;:&quot;QUOTE&quot;,&quot;Box&quot;:[23.57,394.65,24.27,12.11]},{&quot;Text&quot;:&quot;NUMBER&quot;,&quot;Box&quot;:[23.57,420.76,30.72,12.11]},{&quot;Text&quot;:&quot;End-user&quot;,&quot;Box&quot;:[214.36,329.75,39.01,10.71]},{&quot;Text&quot;:&quot;Billing&quot;,&quot;Box&quot;:[368.74,53.89,42.78,16.66]},{&quot;Text&quot;:&quot;terms&quot;,&quot;Box&quot;:[368.74,100.55,38.12,16.66]},{&quot;Text&quot;:&quot;Billing&quot;,&quot;Box&quot;:[397.88,296.95,27.5,10.71]},{&quot;Text&quot;:&quot;cycle:&quot;,&quot;Box&quot;:[397.88,326.95,25.52,10.71]}],&quot;Fields&quot;:[{&quot;Field&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.QuoteNum&quot;,&quot;Box&quot;:[19.4727,452.5091,45.4364,17.6182]},{&quot;Field&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.Currency&quot;,&quot;Box&quot;:[408.9273,111.2727,439.5273,7.4182]},{&quot;Field&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.EndUserName&quot;,&quot;Box&quot;:[213.2727,372.7636,180.8182,20.4]}],&quot;Tables&quot;:[{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;,&quot;Headers&quot;:[{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;,&quot;Box&quot;:[0.0,0.0,0.0,0.0]}],&quot;Cells&quot;:[{&quot;Row&quot;:0,&quot;Column&quot;:0,&quot;Box&quot;:[480.3273,35.2364,60.3909,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:1,&quot;Box&quot;:[480.3273,95.6273,44.0,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:2,&quot;Box&quot;:[480.3273,139.6273,50.0,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:3,&quot;Box&quot;:[480.3273,189.6273,50.0,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:4,&quot;Box&quot;:[480.3273,239.6273,54.0,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:5,&quot;Box&quot;:[480.3273,293.6273,54.0,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:6,&quot;Box&quot;:[480.3273,347.6273,54.0,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:7,&quot;Box&quot;:[480.3273,401.6273,54.0,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:8,&quot;Box&quot;:[480.3273,455.6273,44.0,41.8636]},{&quot;Row&quot;:0,&quot;Column&quot;:9,&quot;Box&quot;:[480.3273,499.6273,56.0,41.8636]},{&quot;Row&quot;:1,&quot;Column&quot;:0,&quot;Box&quot;:[522.1909,35.2364,60.3909,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:1,&quot;Box&quot;:[522.1909,95.6273,44.0,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:2,&quot;Box&quot;:[522.1909,139.6273,50.0,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:3,&quot;Box&quot;:[522.1909,189.6273,50.0,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:4,&quot;Box&quot;:[522.1909,239.6273,54.0,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:5,&quot;Box&quot;:[522.1909,293.6273,54.0,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:6,&quot;Box&quot;:[522.1909,347.6273,54.0,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:7,&quot;Box&quot;:[522.1909,401.6273,54.0,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:8,&quot;Box&quot;:[522.1909,455.6273,44.0,40.0]},{&quot;Row&quot;:1,&quot;Column&quot;:9,&quot;Box&quot;:[522.1909,499.6273,56.0,40.0]},{&quot;Row&quot;:2,&quot;Column&quot;:0,&quot;Box&quot;:[562.1909,35.2364,60.3909,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:1,&quot;Box&quot;:[562.1909,95.6273,44.0,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:2,&quot;Box&quot;:[562.1909,139.6273,50.0,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:3,&quot;Box&quot;:[562.1909,189.6273,50.0,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:4,&quot;Box&quot;:[562.1909,239.6273,54.0,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:5,&quot;Box&quot;:[562.1909,293.6273,54.0,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:6,&quot;Box&quot;:[562.1909,347.6273,54.0,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:7,&quot;Box&quot;:[562.1909,401.6273,54.0,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:8,&quot;Box&quot;:[562.1909,455.6273,44.0,44.0]},{&quot;Row&quot;:2,&quot;Column&quot;:9,&quot;Box&quot;:[562.1909,499.6273,56.0,44.0]},{&quot;Row&quot;:3,&quot;Column&quot;:0,&quot;Box&quot;:[606.1909,35.2364,60.3909,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:1,&quot;Box&quot;:[606.1909,95.6273,44.0,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:2,&quot;Box&quot;:[606.1909,139.6273,50.0,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:3,&quot;Box&quot;:[606.1909,189.6273,50.0,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:4,&quot;Box&quot;:[606.1909,239.6273,54.0,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:5,&quot;Box&quot;:[606.1909,293.6273,54.0,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:6,&quot;Box&quot;:[606.1909,347.6273,54.0,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:7,&quot;Box&quot;:[606.1909,401.6273,54.0,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:8,&quot;Box&quot;:[606.1909,455.6273,44.0,40.5818]},{&quot;Row&quot;:3,&quot;Column&quot;:9,&quot;Box&quot;:[606.1909,499.6273,56.0,40.5818]}]}]},{&quot;Page&quot;:1,&quot;Size&quot;:[0.0,0.0,612.0,792.0],&quot;SkewAngle&quot;:0.0,&quot;Evidence&quot;:[{&quot;Text&quot;:&quot;Mandatory&quot;,&quot;Box&quot;:[502.15,53.48,70.78,16.66]},{&quot;Text&quot;:&quot;information&quot;,&quot;Box&quot;:[502.15,128.51,77.0,16.66]},{&quot;Text&quot;:&quot;included&quot;,&quot;Box&quot;:[502.15,247.8,57.57,16.66]},{&quot;Text&quot;:&quot;Partner&quot;,&quot;Box&quot;:[502.15,330.19,49.01,16.66]},{&quot;Text&quot;:&quot;PO:&quot;,&quot;Box&quot;:[502.15,425.4,24.89,16.66]},{&quot;Text&quot;:&quot;Signature:&quot;,&quot;Box&quot;:[623.68,41.15,41.02,10.4]}],&quot;Fields&quot;:[{&quot;Field&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.TotalValue&quot;,&quot;Box&quot;:[214.2,498.8727,58.4182,10.2]}],&quot;Tables&quot;:[{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails&quot;,&quot;Headers&quot;:[{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.SoftwareDescription&quot;,&quot;Box&quot;:[133.5273,38.0182,56.3909,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.Quantity&quot;,&quot;Box&quot;:[133.5273,94.4091,44.0,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.UnitofMeasure&quot;,&quot;Box&quot;:[133.5273,138.4091,50.0,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseModel&quot;,&quot;Box&quot;:[133.5273,188.4091,50.0,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermStartDate&quot;,&quot;Box&quot;:[133.5273,238.4091,54.0,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.LicenseTermEndDate&quot;,&quot;Box&quot;:[133.5273,292.4091,54.0,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.ListUnitPrice&quot;,&quot;Box&quot;:[133.5273,346.4091,54.0,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.TotalDiscount%&quot;,&quot;Box&quot;:[133.5273,400.4091,54.0,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetUnitPrice&quot;,&quot;Box&quot;:[133.5273,454.4091,44.0,1.3909]},{&quot;FieldId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction.ServiceDetails.NetTotalUSD&quot;,&quot;Box&quot;:[133.5273,498.4091,57.0,1.3909]}],&quot;Cells&quot;:[{&quot;Row&quot;:4,&quot;Column&quot;:0,&quot;Box&quot;:[134.9182,38.0182,56.3909,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:1,&quot;Box&quot;:[134.9182,94.4091,44.0,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:2,&quot;Box&quot;:[134.9182,138.4091,50.0,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:3,&quot;Box&quot;:[134.9182,188.4091,50.0,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:4,&quot;Box&quot;:[134.9182,238.4091,54.0,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:5,&quot;Box&quot;:[134.9182,292.4091,54.0,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:6,&quot;Box&quot;:[134.9182,346.4091,54.0,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:7,&quot;Box&quot;:[134.9182,400.4091,54.0,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:8,&quot;Box&quot;:[134.9182,454.4091,44.0,40.0]},{&quot;Row&quot;:4,&quot;Column&quot;:9,&quot;Box&quot;:[134.9182,498.4091,57.0,40.0]},{&quot;Row&quot;:5,&quot;Column&quot;:0,&quot;Box&quot;:[174.9182,38.0182,56.3909,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:1,&quot;Box&quot;:[174.9182,94.4091,44.0,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:2,&quot;Box&quot;:[174.9182,138.4091,50.0,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:3,&quot;Box&quot;:[174.9182,188.4091,50.0,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:4,&quot;Box&quot;:[174.9182,238.4091,54.0,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:5,&quot;Box&quot;:[174.9182,292.4091,54.0,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:6,&quot;Box&quot;:[174.9182,346.4091,54.0,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:7,&quot;Box&quot;:[174.9182,400.4091,54.0,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:8,&quot;Box&quot;:[174.9182,454.4091,44.0,35.0]},{&quot;Row&quot;:5,&quot;Column&quot;:9,&quot;Box&quot;:[174.9182,498.4091,57.0,35.0]}]}]}],&quot;AnchorBasedConfiguration&quot;:{&quot;AnchorBasedFieldConfiguration&quot;:[]}}]" Timeout="100000">
                <p4:FormExtractor.DocumentBounds>
                  <InArgument x:TypeArguments="p5:ResultsDocumentBounds">
                    <DelegateArgumentValue x:TypeArguments="p5:ResultsDocumentBounds">
                      <DelegateInArgument x:TypeArguments="p5:ResultsDocumentBounds" Name="DocumentBounds" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:FormExtractor.DocumentBounds>
                <p4:FormExtractor.DocumentObjectModel>
                  <InArgument x:TypeArguments="p3:Document">
                    <DelegateArgumentValue x:TypeArguments="p3:Document">
                      <DelegateInArgument x:TypeArguments="p3:Document" Name="DocumentObjectModel" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:FormExtractor.DocumentObjectModel>
                <p4:FormExtractor.DocumentPath>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentPath" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:FormExtractor.DocumentPath>
                <p4:FormExtractor.DocumentText>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentText" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:FormExtractor.DocumentText>
                <p4:FormExtractor.ExtractorDocumentType>
                  <InArgument x:TypeArguments="p6:ExtractorDocumentType">
                    <DelegateArgumentValue x:TypeArguments="p6:ExtractorDocumentType">
                      <DelegateInArgument x:TypeArguments="p6:ExtractorDocumentType" Name="ExtractorDocumentType" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:FormExtractor.ExtractorDocumentType>
                <p4:FormExtractor.ExtractorResult>
                  <OutArgument x:TypeArguments="p6:ExtractorResult">
                    <DelegateArgumentReference x:TypeArguments="p6:ExtractorResult">
                      <DelegateOutArgument x:TypeArguments="p6:ExtractorResult" Name="ExtractorResult" />
                    </DelegateArgumentReference>
                  </OutArgument>
                </p4:FormExtractor.ExtractorResult>
                <p4:FormExtractor.PredictionId>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="PredictionId" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p4:FormExtractor.PredictionId>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </p4:FormExtractor>
              <p7:MachineLearningExtractor AvailableMLSkills="{x:Null}" SelectedMLSkill="{x:Null}" ApiKey="kSVgKX8zjY9nYlfF9ti4S88YmcHAXWOsgAg8GEHuJjv+oW0wGXxi1GNcxx8z7X/57XaYrnOo0glZonEWrW256Q==" Configuration="{}{&quot;Endpoint&quot;:&quot;https://du.uipath.com/ie/purchase_orders&quot;}" DisplayName="ML Extractor PO" Endpoint="https://du.uipath.com/ie/purchase_orders" sap:VirtualizedContainerService.HintSize="234,193" sap2010:WorkflowViewState.IdRef="MachineLearningExtractor_5" PersistenceId="UIf98fdf5cd25a4bbbb882693764a8b8ef" RetryOnFailure="True" Timeout="100000" UseServerSideOCR="False">
                <p7:MachineLearningExtractor.DocumentBounds>
                  <InArgument x:TypeArguments="p5:ResultsDocumentBounds">
                    <DelegateArgumentValue x:TypeArguments="p5:ResultsDocumentBounds">
                      <DelegateInArgument x:TypeArguments="p5:ResultsDocumentBounds" Name="DocumentBounds" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentBounds>
                <p7:MachineLearningExtractor.DocumentObjectModel>
                  <InArgument x:TypeArguments="p3:Document">
                    <DelegateArgumentValue x:TypeArguments="p3:Document">
                      <DelegateInArgument x:TypeArguments="p3:Document" Name="DocumentObjectModel" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentObjectModel>
                <p7:MachineLearningExtractor.DocumentPath>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentPath" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentPath>
                <p7:MachineLearningExtractor.DocumentText>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentText" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentText>
                <p7:MachineLearningExtractor.ExtractorDocumentType>
                  <InArgument x:TypeArguments="p6:ExtractorDocumentType">
                    <DelegateArgumentValue x:TypeArguments="p6:ExtractorDocumentType">
                      <DelegateInArgument x:TypeArguments="p6:ExtractorDocumentType" Name="ExtractorDocumentType" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.ExtractorDocumentType>
                <p7:MachineLearningExtractor.ExtractorResult>
                  <OutArgument x:TypeArguments="p6:ExtractorResult">
                    <DelegateArgumentReference x:TypeArguments="p6:ExtractorResult">
                      <DelegateOutArgument x:TypeArguments="p6:ExtractorResult" Name="ExtractorResult" />
                    </DelegateArgumentReference>
                  </OutArgument>
                </p7:MachineLearningExtractor.ExtractorResult>
                <p7:MachineLearningExtractor.PredictionId>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="PredictionId" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.PredictionId>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </p7:MachineLearningExtractor>
              <p7:MachineLearningExtractor SelectedMLSkill="{x:Null}" ApiKey="kSVgKX8zjY9nYlfF9ti4S88YmcHAXWOsgAg8GEHuJjv+oW0wGXxi1GNcxx8z7X/57XaYrnOo0glZonEWrW256Q==" Configuration="{}{&quot;Endpoint&quot;:&quot;https://du.uipath.com/ie/invoices&quot;,&quot;ApiKey&quot;:&quot;&quot;,&quot;AvailableMLSkills&quot;:[]}" DisplayName="ML Invoice" Endpoint="https://du.uipath.com/ie/invoices" sap:VirtualizedContainerService.HintSize="234,193" sap2010:WorkflowViewState.IdRef="MachineLearningExtractor_7" PersistenceId="UI4af5231995624736b7dbd7751dd762e9" RetryOnFailure="True" Timeout="100000" UseServerSideOCR="False">
                <p7:MachineLearningExtractor.AvailableMLSkills>
                  <sc:BindingList x:TypeArguments="x:String" AllowEdit="True" AllowNew="False" AllowRemove="True" RaiseListChangedEvents="True" />
                </p7:MachineLearningExtractor.AvailableMLSkills>
                <p7:MachineLearningExtractor.DocumentBounds>
                  <InArgument x:TypeArguments="p5:ResultsDocumentBounds">
                    <DelegateArgumentValue x:TypeArguments="p5:ResultsDocumentBounds">
                      <DelegateInArgument x:TypeArguments="p5:ResultsDocumentBounds" Name="DocumentBounds" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentBounds>
                <p7:MachineLearningExtractor.DocumentObjectModel>
                  <InArgument x:TypeArguments="p3:Document">
                    <DelegateArgumentValue x:TypeArguments="p3:Document">
                      <DelegateInArgument x:TypeArguments="p3:Document" Name="DocumentObjectModel" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentObjectModel>
                <p7:MachineLearningExtractor.DocumentPath>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentPath" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentPath>
                <p7:MachineLearningExtractor.DocumentText>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentText" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentText>
                <p7:MachineLearningExtractor.ExtractorDocumentType>
                  <InArgument x:TypeArguments="p6:ExtractorDocumentType">
                    <DelegateArgumentValue x:TypeArguments="p6:ExtractorDocumentType">
                      <DelegateInArgument x:TypeArguments="p6:ExtractorDocumentType" Name="ExtractorDocumentType" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.ExtractorDocumentType>
                <p7:MachineLearningExtractor.ExtractorResult>
                  <OutArgument x:TypeArguments="p6:ExtractorResult">
                    <DelegateArgumentReference x:TypeArguments="p6:ExtractorResult">
                      <DelegateOutArgument x:TypeArguments="p6:ExtractorResult" Name="ExtractorResult" />
                    </DelegateArgumentReference>
                  </OutArgument>
                </p7:MachineLearningExtractor.ExtractorResult>
                <p7:MachineLearningExtractor.PredictionId>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="PredictionId" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.PredictionId>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </p7:MachineLearningExtractor>
              <p7:MachineLearningExtractor SelectedMLSkill="{x:Null}" ApiKey="kSVgKX8zjY9nYlfF9ti4S88YmcHAXWOsgAg8GEHuJjv+oW0wGXxi1GNcxx8z7X/57XaYrnOo0glZonEWrW256Q==" Configuration="{}{&quot;Endpoint&quot;:&quot;https://du.uipath.com/ie/invoices_au_preview&quot;,&quot;ApiKey&quot;:&quot;&quot;,&quot;AvailableMLSkills&quot;:[]}" DisplayName="ML Invoice Australia" Endpoint="https://du.uipath.com/ie/invoices_au_preview" sap:VirtualizedContainerService.HintSize="234,193" sap2010:WorkflowViewState.IdRef="MachineLearningExtractor_9" PersistenceId="UI434ebd49424f4b12a74820968b6188d3" RetryOnFailure="True" Timeout="100000" UseServerSideOCR="False">
                <p7:MachineLearningExtractor.AvailableMLSkills>
                  <sc:BindingList x:TypeArguments="x:String" AllowEdit="True" AllowNew="False" AllowRemove="True" RaiseListChangedEvents="True" />
                </p7:MachineLearningExtractor.AvailableMLSkills>
                <p7:MachineLearningExtractor.DocumentBounds>
                  <InArgument x:TypeArguments="p5:ResultsDocumentBounds">
                    <DelegateArgumentValue x:TypeArguments="p5:ResultsDocumentBounds">
                      <DelegateInArgument x:TypeArguments="p5:ResultsDocumentBounds" Name="DocumentBounds" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentBounds>
                <p7:MachineLearningExtractor.DocumentObjectModel>
                  <InArgument x:TypeArguments="p3:Document">
                    <DelegateArgumentValue x:TypeArguments="p3:Document">
                      <DelegateInArgument x:TypeArguments="p3:Document" Name="DocumentObjectModel" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentObjectModel>
                <p7:MachineLearningExtractor.DocumentPath>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentPath" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentPath>
                <p7:MachineLearningExtractor.DocumentText>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentText" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.DocumentText>
                <p7:MachineLearningExtractor.ExtractorDocumentType>
                  <InArgument x:TypeArguments="p6:ExtractorDocumentType">
                    <DelegateArgumentValue x:TypeArguments="p6:ExtractorDocumentType">
                      <DelegateInArgument x:TypeArguments="p6:ExtractorDocumentType" Name="ExtractorDocumentType" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.ExtractorDocumentType>
                <p7:MachineLearningExtractor.ExtractorResult>
                  <OutArgument x:TypeArguments="p6:ExtractorResult">
                    <DelegateArgumentReference x:TypeArguments="p6:ExtractorResult">
                      <DelegateOutArgument x:TypeArguments="p6:ExtractorResult" Name="ExtractorResult" />
                    </DelegateArgumentReference>
                  </OutArgument>
                </p7:MachineLearningExtractor.ExtractorResult>
                <p7:MachineLearningExtractor.PredictionId>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="PredictionId" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p7:MachineLearningExtractor.PredictionId>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </p7:MachineLearningExtractor>
            </p4:DataExtractionScope.Extractors>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </p4:DataExtractionScope>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence sap:VirtualizedContainerService.HintSize="376,180" sap2010:WorkflowViewState.IdRef="Sequence_37">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,92" sap2010:WorkflowViewState.IdRef="LogMessage_37" Level="Info" Message="[&quot;Classification of the document &lt;&quot; + docName+ &quot;&gt; failed!&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
        </Sequence>
      </If.Else>
    </If>
    <TryCatch DisplayName="Validation" sap:VirtualizedContainerService.HintSize="516,1390" sap2010:WorkflowViewState.IdRef="TryCatch_5">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <TryCatch.Try>
        <Sequence sap:VirtualizedContainerService.HintSize="376,586" sap2010:WorkflowViewState.IdRef="Sequence_38">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,92" sap2010:WorkflowViewState.IdRef="LogMessage_38" Level="Info" Message="[&quot;Opening Validation Station for document &lt;&quot; + docName+ &quot;&gt;&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
          <p:PresentValidationStation AutomaticExtractionResults="[extractionResult]" DisplayName="Present Validation Station" DocumentObjectModel="[dom]" DocumentPath="[in_file_input.ToString]" DocumentText="[documentText]" sap:VirtualizedContainerService.HintSize="334,366" sap2010:WorkflowViewState.IdRef="PresentValidationStation_5" ShowOnlyRelevantPageRange="False" Taxonomy="[taxonomy]" ValidatedExtractionResults="[validatedExtractionResult]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </p:PresentValidationStation>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="482,493" sap2010:WorkflowViewState.IdRef="Catch`1_5">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
            </ActivityAction.Argument>
            <Sequence sap:VirtualizedContainerService.HintSize="476,424" sap2010:WorkflowViewState.IdRef="Sequence_39">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:String" Name="validationStationMessage" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_20">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Boolean">[validationStationError]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                </Assign.Value>
              </Assign>
              <Assign sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_21">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:String">[validationStationMessage]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:String">[exception.Message]</InArgument>
                </Assign.Value>
              </Assign>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,92" sap2010:WorkflowViewState.IdRef="LogMessage_39" Level="Info" Message="[&quot;Validating document &lt;&quot; + docName+ &quot;&gt; failed!&quot;]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </Sequence>
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
    <If Condition="[validationStationError=False]" DisplayName="Consume Extraction Results" sap:VirtualizedContainerService.HintSize="516,52" sap2010:WorkflowViewState.IdRef="If_7">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="1123,10180" sap2010:WorkflowViewState.IdRef="Sequence_47">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence DisplayName="Export Extraction Results" sap:VirtualizedContainerService.HintSize="1081,9668" sap2010:WorkflowViewState.IdRef="Sequence_46">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="1019,92" sap2010:WorkflowViewState.IdRef="LogMessage_41" Level="Info" Message="[&quot;Exporting the extraction results for document &lt;&quot; + docName + &quot;&gt;&quot;]">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:LogMessage>
            <p4:ExportExtractionResults DataSet="[outputData]" DisplayName="Export Extraction Results" ExtractionResult="[extractionResult]" sap:VirtualizedContainerService.HintSize="1019,183" sap2010:WorkflowViewState.IdRef="ExportExtractionResults_6" IncludeConfidence="False" IncludeOCRConfidence="False">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </p4:ExportExtractionResults>
            <Assign sap:VirtualizedContainerService.HintSize="1019,70" sap2010:WorkflowViewState.IdRef="Assign_29">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Int32">[count]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Int32">0</InArgument>
              </Assign.Value>
            </Assign>
            <ui:ForEach x:TypeArguments="sd2:DataTable" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="1019,9092" sap2010:WorkflowViewState.IdRef="ForEach`1_7" Values="[outputData.Tables]">
              <ui:ForEach.Body>
                <ActivityAction x:TypeArguments="sd2:DataTable">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="sd2:DataTable" Name="table" />
                  </ActivityAction.Argument>
                  <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="983,8959" sap2010:WorkflowViewState.IdRef="Sequence_45">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign DisplayName="Increment for number of tables" sap:VirtualizedContainerService.HintSize="941,70" sap2010:WorkflowViewState.IdRef="Assign_23">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">[count]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">[count+1]</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:WriteRange AddHeaders="True" DataTable="[table]" DisplayName="Write Table Output to Excel" sap:VirtualizedContainerService.HintSize="941,125" sap2010:WorkflowViewState.IdRef="WriteRange_2" SheetName="[table.TableName]" StartingCell="A1" WorkbookPath="[in_file_output.Replace(System.IO.Path.GetFileNameWithoutExtension(in_file_output)+&quot;.xlsx&quot;,&quot;&quot;) + docName + &quot;_output.xlsx&quot;]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:WriteRange>
                    <ui:IfElseIf DisplayName="Else If for first and third tables" sap:VirtualizedContainerService.HintSize="941,8594" sap2010:WorkflowViewState.IdRef="IfElseIf_2">
                      <ui:IfElseIf.ConditionBlocks>
                        <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
                          <ui:IfElseIfBlock BlockType="If" Condition="[count.Equals(1)]">
                            <ui:IfElseIfBlock.Then>
                              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="628,1718" sap2010:WorkflowViewState.IdRef="Sequence_52">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="586,1447" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_1">
                                  <ueab:ExcelProcessScopeX.Body>
                                    <ActivityAction x:TypeArguments="ui:IExcelProcess">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
                                      </ActivityAction.Argument>
                                      <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="552,1351" sap2010:WorkflowViewState.IdRef="Sequence_54">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="510,1261" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_1" ResizeWindow="None" WorkbookPath="[in_file_output.Split(&quot;.&quot;c)(0).ToString + &quot;_&quot; + docName + &quot;.xlsx&quot;]">
                                          <ueab:ExcelApplicationCard.Body>
                                            <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                                              <ActivityAction.Argument>
                                                <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                                              </ActivityAction.Argument>
                                              <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="476,983" sap2010:WorkflowViewState.IdRef="Sequence_57">
                                                <sap:WorkflowViewStateService.ViewState>
                                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  </scg:Dictionary>
                                                </sap:WorkflowViewStateService.ViewState>
                                                <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="434,61" sap2010:WorkflowViewState.IdRef="TryCatch_9">
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                  <TryCatch.Try>
                                                    <uix:NClick ClickType="Single" DisplayName="Click 'Close'" sap:VirtualizedContainerService.HintSize="334,166" sap2010:WorkflowViewState.IdRef="NClick_1" InScope="[Excel]" KeyModifiers="None" MouseButton="Left" ScopeIdentifier="Excel" Version="V3">
                                                      <uix:NClick.Target>
                                                        <uix:TargetAnchorable ContentHash="FdeYoHClgkSUBFtT2A8c9g" DesignTimeRectangle="416, 406, 75, 23" DesignTimeScaleFactor="1" ElementType="Button" FriendlyName="'Close'" FullSelectorArgument="&lt;uia cls='NetUIButton' name='Close' /&gt;" FuzzySelectorArgument="&lt;uia cls='NetUIButton' name='Close' role='Button' automationid='' check:fulltext='Close' /&gt;" Guid="e1c3e4f0-55c7-438a-98de-9cd6b3d254a5" ImageBase64="iVBORw0KGgoAAAANSUhEUgAAAE8AAAAbCAYAAAA9K9JnAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGaSURBVGhD7Zg7SsVAFIan0A24mxQ27mU6sRasXMHUFi5jWhHtBDsVHFyBciGNhWA43t887jwTuUmYSE7xwZ2Zk8D98p8EjijLkpj9YHkjYHkjCOTdmw86uXqjw4tnEudPqwce4ANefFeOPBQcXb7Q9cOGPr++qaqq1QMP8AEvvkBHHgyjMHaTtQMv8GP7cuQhopy4OPACP7YvRx56PHYhUwM/ji9nwfJ6YXkjyCtPSxJCdBTKbPc1SVGQMpH6hZFP3q84STo4Y3kDGFJFSpAvD+s2ne41RhXNvv0QrHqpu9o5yCPPKCoKRSZ25snTsm3n7Rpp7a5DXZhc1EuN330PaBoWLs8V6a4hx08XzpvUNdQi5yGPvEBK6qxPXk3dum0C++47PZnkNX/aSZ8mFfnaptu2xW7POo1d/cxkkwd2L3yQSg/WbU1i325dvBK6+tjXfDqyyvvvZJG3S1tIrH6p9MrjqUqawakKz/PSDM7zeJIcAg/wMThJBnev73SsHung7JbE6c3qgQf4gBffVSCP+TssbwQsb29K+gF4r6lZF1lp3QAAAABJRU5ErkJggg==" InformativeScreenshot="7d7180cc01814627806c371ddf5dd679.png" Reference="Iduy_zbUgUmPUf17L8aBFw/1CKJJ3lb0k21zoBm8DeYjQ" ScopeSelectorArgument="&lt;wnd app='excel.exe' cls='NUIDialog' title='Microsoft Office Activation Wizard' /&gt;" SearchSteps="Selector, FuzzySelector, Image" Version="V1" Visibility="Interactive" />
                                                      </uix:NClick.Target>
                                                      <sap:WorkflowViewStateService.ViewState>
                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                        </scg:Dictionary>
                                                      </sap:WorkflowViewStateService.ViewState>
                                                    </uix:NClick>
                                                  </TryCatch.Try>
                                                  <TryCatch.Catches>
                                                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,104" sap2010:WorkflowViewState.IdRef="Catch`1_9">
                                                      <sap:WorkflowViewStateService.ViewState>
                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                        </scg:Dictionary>
                                                      </sap:WorkflowViewStateService.ViewState>
                                                      <ActivityAction x:TypeArguments="s:Exception">
                                                        <ActivityAction.Argument>
                                                          <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                                        </ActivityAction.Argument>
                                                      </ActivityAction>
                                                    </Catch>
                                                  </TryCatch.Catches>
                                                </TryCatch>
                                                <ueab:WriteCellX Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;C3&quot;)]" DisplayName="Write Cell for Quote Number" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_2" Value="[table.Rows(0)(table.Columns(0).ColumnName)]">
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ueab:WriteCellX>
                                                <ueab:WriteCellX Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;G3&quot;)]" DisplayName="Write Cell for today date" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_5" Value="[date.Today]">
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ueab:WriteCellX>
                                                <ueab:WriteCellX Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;C9&quot;)]" DisplayName="Write Cell for currency" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_3" Value="[table.Rows(0)(table.Columns(1).ColumnName)]">
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ueab:WriteCellX>
                                                <ueab:WriteCellX Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;G9&quot;)]" DisplayName="Write Cell for end-user name" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_4" Value="[table.Rows(0)(table.Columns(2).ColumnName)]">
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ueab:WriteCellX>
                                              </Sequence>
                                            </ActivityAction>
                                          </ueab:ExcelApplicationCard.Body>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ueab:ExcelApplicationCard>
                                      </Sequence>
                                    </ActivityAction>
                                  </ueab:ExcelProcessScopeX.Body>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ueab:ExcelProcessScopeX>
                                <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="586,141" sap2010:WorkflowViewState.IdRef="MultipleAssign_4">
                                  <ui:MultipleAssign.AssignOperations>
                                    <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_8">
                                        <ui:AssignOperation.To>
                                          <OutArgument x:TypeArguments="x:String">[total_Value]</OutArgument>
                                        </ui:AssignOperation.To>
                                        <ui:AssignOperation.Value>
                                          <InArgument x:TypeArguments="x:String">[table.Rows(0)(table.Columns(3).ColumnName).ToString]</InArgument>
                                        </ui:AssignOperation.Value>
                                      </ui:AssignOperation>
                                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_9">
                                        <ui:AssignOperation.To>
                                          <OutArgument x:TypeArguments="x:String">[curr_type]</OutArgument>
                                        </ui:AssignOperation.To>
                                        <ui:AssignOperation.Value>
                                          <InArgument x:TypeArguments="x:String">[table.Rows(0)(table.Columns(1).ColumnName).ToString]</InArgument>
                                        </ui:AssignOperation.Value>
                                      </ui:AssignOperation>
                                    </scg:List>
                                  </ui:MultipleAssign.AssignOperations>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:MultipleAssign>
                              </Sequence>
                            </ui:IfElseIfBlock.Then>
                          </ui:IfElseIfBlock>
                          <ui:IfElseIfBlock BlockType="ElseIf" Condition="[count.Equals(3)]">
                            <ui:IfElseIfBlock.Then>
                              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="890,6547" sap2010:WorkflowViewState.IdRef="Sequence_53">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ueab:ExcelProcessScopeX DisplayAlerts="{x:Null}" ExistingProcessAction="{x:Null}" FileConflictResolution="{x:Null}" LaunchMethod="{x:Null}" LaunchTimeout="{x:Null}" MacroSettings="{x:Null}" ProcessMode="{x:Null}" ShowExcelWindow="{x:Null}" DisplayName="Excel Process Scope" sap:VirtualizedContainerService.HintSize="848,6457" sap2010:WorkflowViewState.IdRef="ExcelProcessScopeX_2">
                                  <ueab:ExcelProcessScopeX.Body>
                                    <ActivityAction x:TypeArguments="ui:IExcelProcess">
                                      <ActivityAction.Argument>
                                        <DelegateInArgument x:TypeArguments="ui:IExcelProcess" Name="ExcelProcessScopeTag" />
                                      </ActivityAction.Argument>
                                      <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="814,6361" sap2010:WorkflowViewState.IdRef="Sequence_60">
                                        <sap:WorkflowViewStateService.ViewState>
                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          </scg:Dictionary>
                                        </sap:WorkflowViewStateService.ViewState>
                                        <ueab:ExcelApplicationCard Password="{x:Null}" ReadFormatting="{x:Null}" DisplayName="Use Excel File" sap:VirtualizedContainerService.HintSize="772,6271" sap2010:WorkflowViewState.IdRef="ExcelApplicationCard_2" ResizeWindow="None" WorkbookPath="[in_file_output.Split(&quot;.&quot;c)(0).ToString + &quot;_&quot; + docName + &quot;.xlsx&quot;]">
                                          <ueab:ExcelApplicationCard.Body>
                                            <ActivityAction x:TypeArguments="ue:IWorkbookQuickHandle">
                                              <ActivityAction.Argument>
                                                <DelegateInArgument x:TypeArguments="ue:IWorkbookQuickHandle" Name="Excel" />
                                              </ActivityAction.Argument>
                                              <Sequence DisplayName="Do" sap:VirtualizedContainerService.HintSize="738,5993" sap2010:WorkflowViewState.IdRef="Sequence_59">
                                                <Sequence.Variables>
                                                  <Variable x:TypeArguments="x:String" Name="amount_in_words" />
                                                  <Variable x:TypeArguments="x:String" Name="outputFile" />
                                                </Sequence.Variables>
                                                <sap:WorkflowViewStateService.ViewState>
                                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                  </scg:Dictionary>
                                                </sap:WorkflowViewStateService.ViewState>
                                                <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="696,61" sap2010:WorkflowViewState.IdRef="TryCatch_10">
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                  <TryCatch.Try>
                                                    <uix:NClick ClickType="Single" DisplayName="Click 'Close'" sap:VirtualizedContainerService.HintSize="334,166" sap2010:WorkflowViewState.IdRef="NClick_2" InScope="[Excel]" KeyModifiers="None" MouseButton="Left" ScopeIdentifier="Excel" Version="V3">
                                                      <uix:NClick.Target>
                                                        <uix:TargetAnchorable ContentHash="FdeYoHClgkSUBFtT2A8c9g" DesignTimeRectangle="416, 406, 75, 23" DesignTimeScaleFactor="1" ElementType="Button" FriendlyName="'Close'" FullSelectorArgument="&lt;uia cls='NetUIButton' name='Close' /&gt;" FuzzySelectorArgument="&lt;uia cls='NetUIButton' name='Close' role='Button' automationid='' check:fulltext='Close' /&gt;" Guid="e1c3e4f0-55c7-438a-98de-9cd6b3d254a5" ImageBase64="iVBORw0KGgoAAAANSUhEUgAAAE8AAAAbCAYAAAA9K9JnAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGaSURBVGhD7Zg7SsVAFIan0A24mxQ27mU6sRasXMHUFi5jWhHtBDsVHFyBciGNhWA43t887jwTuUmYSE7xwZ2Zk8D98p8EjijLkpj9YHkjYHkjCOTdmw86uXqjw4tnEudPqwce4ANefFeOPBQcXb7Q9cOGPr++qaqq1QMP8AEvvkBHHgyjMHaTtQMv8GP7cuQhopy4OPACP7YvRx56PHYhUwM/ji9nwfJ6YXkjyCtPSxJCdBTKbPc1SVGQMpH6hZFP3q84STo4Y3kDGFJFSpAvD+s2ne41RhXNvv0QrHqpu9o5yCPPKCoKRSZ25snTsm3n7Rpp7a5DXZhc1EuN330PaBoWLs8V6a4hx08XzpvUNdQi5yGPvEBK6qxPXk3dum0C++47PZnkNX/aSZ8mFfnaptu2xW7POo1d/cxkkwd2L3yQSg/WbU1i325dvBK6+tjXfDqyyvvvZJG3S1tIrH6p9MrjqUqawakKz/PSDM7zeJIcAg/wMThJBnev73SsHung7JbE6c3qgQf4gBffVSCP+TssbwQsb29K+gF4r6lZF1lp3QAAAABJRU5ErkJggg==" InformativeScreenshot="7d7180cc01814627806c371ddf5dd679.png" Reference="Iduy_zbUgUmPUf17L8aBFw/1CKJJ3lb0k21zoBm8DeYjQ" ScopeSelectorArgument="&lt;wnd app='excel.exe' cls='NUIDialog' title='Microsoft Office Activation Wizard' /&gt;" SearchSteps="Selector, FuzzySelector, Image" Version="V1" Visibility="Interactive" />
                                                      </uix:NClick.Target>
                                                      <sap:WorkflowViewStateService.ViewState>
                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                        </scg:Dictionary>
                                                      </sap:WorkflowViewStateService.ViewState>
                                                    </uix:NClick>
                                                  </TryCatch.Try>
                                                  <TryCatch.Catches>
                                                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,104" sap2010:WorkflowViewState.IdRef="Catch`1_10">
                                                      <sap:WorkflowViewStateService.ViewState>
                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                        </scg:Dictionary>
                                                      </sap:WorkflowViewStateService.ViewState>
                                                      <ActivityAction x:TypeArguments="s:Exception">
                                                        <ActivityAction.Argument>
                                                          <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                                        </ActivityAction.Argument>
                                                      </ActivityAction>
                                                    </Catch>
                                                  </TryCatch.Catches>
                                                </TryCatch>
                                                <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="696,141" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
                                                  <ui:MultipleAssign.AssignOperations>
                                                    <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                                                        <ui:AssignOperation.To>
                                                          <OutArgument x:TypeArguments="x:Int32">[initial_rows]</OutArgument>
                                                        </ui:AssignOperation.To>
                                                        <ui:AssignOperation.Value>
                                                          <InArgument x:TypeArguments="x:Int32">12</InArgument>
                                                        </ui:AssignOperation.Value>
                                                      </ui:AssignOperation>
                                                      <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                                                        <ui:AssignOperation.To>
                                                          <OutArgument x:TypeArguments="x:Int32">[row_count]</OutArgument>
                                                        </ui:AssignOperation.To>
                                                        <ui:AssignOperation.Value>
                                                          <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                                        </ui:AssignOperation.Value>
                                                      </ui:AssignOperation>
                                                    </scg:List>
                                                  </ui:MultipleAssign.AssignOperations>
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ui:MultipleAssign>
                                                <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[table]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="696,3889" sap2010:WorkflowViewState.IdRef="ForEachRow_2">
                                                  <ui:ForEachRow.Body>
                                                    <ActivityAction x:TypeArguments="sd2:DataRow">
                                                      <ActivityAction.Argument>
                                                        <DelegateInArgument x:TypeArguments="sd2:DataRow" Name="CurrentRow" />
                                                      </ActivityAction.Argument>
                                                      <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="662,3765" sap2010:WorkflowViewState.IdRef="Sequence_58">
                                                        <sap:WorkflowViewStateService.ViewState>
                                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                          </scg:Dictionary>
                                                        </sap:WorkflowViewStateService.ViewState>
                                                        <ui:IfElseIf DisplayName="Else If" sap:VirtualizedContainerService.HintSize="620,3675" sap2010:WorkflowViewState.IdRef="IfElseIf_3">
                                                          <ui:IfElseIf.ConditionBlocks>
                                                            <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
                                                              <ui:IfElseIfBlock BlockType="If" Condition="[CurrentRow(table.Columns(0).ColumnName).ToString.Contains(&quot;UiPath&quot;)]">
                                                                <ui:IfElseIfBlock.Then>
                                                                  <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="569,3471" sap2010:WorkflowViewState.IdRef="Sequence_61">
                                                                    <sap:WorkflowViewStateService.ViewState>
                                                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                                      </scg:Dictionary>
                                                                    </sap:WorkflowViewStateService.ViewState>
                                                                    <ueab:WriteCellX AutoIncrementRow="True" Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;C&quot; + initial_rows.ToString)]" DisplayName="Write Cell for software description" sap:VirtualizedContainerService.HintSize="527,168" sap2010:WorkflowViewState.IdRef="WriteCellX_10" Value="[CurrentRow(table.Columns(0).ColumnName).ToString]">
                                                                      <sap:WorkflowViewStateService.ViewState>
                                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                        </scg:Dictionary>
                                                                      </sap:WorkflowViewStateService.ViewState>
                                                                    </ueab:WriteCellX>
                                                                    <ueab:WriteCellX AutoIncrementRow="True" Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;D&quot; + initial_rows.ToString)]" DisplayName="Write Cell for quantity" sap:VirtualizedContainerService.HintSize="527,168" sap2010:WorkflowViewState.IdRef="WriteCellX_11" Value="[CurrentRow(table.Columns(1).ColumnName).ToString]">
                                                                      <sap:WorkflowViewStateService.ViewState>
                                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                        </scg:Dictionary>
                                                                      </sap:WorkflowViewStateService.ViewState>
                                                                    </ueab:WriteCellX>
                                                                    <TryCatch DisplayName="Try Catch for Unit Price" sap:VirtualizedContainerService.HintSize="527,725" sap2010:WorkflowViewState.IdRef="TryCatch_6">
                                                                      <sap:WorkflowViewStateService.ViewState>
                                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                                        </scg:Dictionary>
                                                                      </sap:WorkflowViewStateService.ViewState>
                                                                      <TryCatch.Try>
                                                                        <ueab:WriteCellX AutoIncrementRow="True" Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;E&quot; + initial_rows.ToString)]" DisplayName="Write Cell for unit price" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_20" Value="[CurrentRow(table.Columns(6).ColumnName).ToString.Split(&quot; &quot;c)(0)]">
                                                                          <sap:WorkflowViewStateService.ViewState>
                                                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                            </scg:Dictionary>
                                                                          </sap:WorkflowViewStateService.ViewState>
                                                                        </ueab:WriteCellX>
                                                                      </TryCatch.Try>
                                                                      <TryCatch.Catches>
                                                                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="440,237" sap2010:WorkflowViewState.IdRef="Catch`1_6">
                                                                          <sap:WorkflowViewStateService.ViewState>
                                                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                            </scg:Dictionary>
                                                                          </sap:WorkflowViewStateService.ViewState>
                                                                          <ActivityAction x:TypeArguments="s:Exception">
                                                                            <ActivityAction.Argument>
                                                                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                                                            </ActivityAction.Argument>
                                                                            <ueab:WriteCellX AutoIncrementRow="True" Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;E&quot; + initial_rows.ToString)]" DisplayName="Write Cell for unit price" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_21" Value="[CurrentRow(table.Columns(6).ColumnName).ToString]">
                                                                              <sap:WorkflowViewStateService.ViewState>
                                                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                                </scg:Dictionary>
                                                                              </sap:WorkflowViewStateService.ViewState>
                                                                            </ueab:WriteCellX>
                                                                          </ActivityAction>
                                                                        </Catch>
                                                                      </TryCatch.Catches>
                                                                    </TryCatch>
                                                                    <TryCatch DisplayName="Try Catch for discount" sap:VirtualizedContainerService.HintSize="527,725" sap2010:WorkflowViewState.IdRef="TryCatch_7">
                                                                      <sap:WorkflowViewStateService.ViewState>
                                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                                        </scg:Dictionary>
                                                                      </sap:WorkflowViewStateService.ViewState>
                                                                      <TryCatch.Try>
                                                                        <ueab:WriteCellX AutoIncrementRow="True" Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;F&quot; + initial_rows.ToString)]" DisplayName="Write Cell for discount" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_22" Value="[CurrentRow(table.Columns(7).ColumnName).ToString.Split(&quot; &quot;c)(0)]">
                                                                          <sap:WorkflowViewStateService.ViewState>
                                                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                            </scg:Dictionary>
                                                                          </sap:WorkflowViewStateService.ViewState>
                                                                        </ueab:WriteCellX>
                                                                      </TryCatch.Try>
                                                                      <TryCatch.Catches>
                                                                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="440,237" sap2010:WorkflowViewState.IdRef="Catch`1_7">
                                                                          <sap:WorkflowViewStateService.ViewState>
                                                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                            </scg:Dictionary>
                                                                          </sap:WorkflowViewStateService.ViewState>
                                                                          <ActivityAction x:TypeArguments="s:Exception">
                                                                            <ActivityAction.Argument>
                                                                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                                                            </ActivityAction.Argument>
                                                                            <ueab:WriteCellX AutoIncrementRow="True" Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;F&quot; + initial_rows.ToString)]" DisplayName="Write Cell for discount" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_23" Value="[CurrentRow(table.Columns(7).ColumnName).ToString]">
                                                                              <sap:WorkflowViewStateService.ViewState>
                                                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                                </scg:Dictionary>
                                                                              </sap:WorkflowViewStateService.ViewState>
                                                                            </ueab:WriteCellX>
                                                                          </ActivityAction>
                                                                        </Catch>
                                                                      </TryCatch.Catches>
                                                                    </TryCatch>
                                                                    <TryCatch DisplayName="Try Catch Amount" sap:VirtualizedContainerService.HintSize="527,725" sap2010:WorkflowViewState.IdRef="TryCatch_8">
                                                                      <sap:WorkflowViewStateService.ViewState>
                                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                        </scg:Dictionary>
                                                                      </sap:WorkflowViewStateService.ViewState>
                                                                      <TryCatch.Try>
                                                                        <ueab:WriteCellX AutoIncrementRow="True" Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;G&quot; + initial_rows.ToString)]" DisplayName="Write Cell for amount" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_24" Value="[CurrentRow(table.Columns(8).ColumnName).ToString.Split(&quot; &quot;c)(0)]">
                                                                          <sap:WorkflowViewStateService.ViewState>
                                                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                            </scg:Dictionary>
                                                                          </sap:WorkflowViewStateService.ViewState>
                                                                        </ueab:WriteCellX>
                                                                      </TryCatch.Try>
                                                                      <TryCatch.Catches>
                                                                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="440,237" sap2010:WorkflowViewState.IdRef="Catch`1_8">
                                                                          <sap:WorkflowViewStateService.ViewState>
                                                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                            </scg:Dictionary>
                                                                          </sap:WorkflowViewStateService.ViewState>
                                                                          <ActivityAction x:TypeArguments="s:Exception">
                                                                            <ActivityAction.Argument>
                                                                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                                                                            </ActivityAction.Argument>
                                                                            <ueab:WriteCellX AutoIncrementRow="True" Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;G&quot; + initial_rows.ToString)]" DisplayName="Write Cell for amount" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="WriteCellX_25" Value="[CurrentRow(table.Columns(8).ColumnName).ToString]">
                                                                              <sap:WorkflowViewStateService.ViewState>
                                                                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                                </scg:Dictionary>
                                                                              </sap:WorkflowViewStateService.ViewState>
                                                                            </ueab:WriteCellX>
                                                                          </ActivityAction>
                                                                        </Catch>
                                                                      </TryCatch.Catches>
                                                                    </TryCatch>
                                                                    <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="527,141" sap2010:WorkflowViewState.IdRef="MultipleAssign_3">
                                                                      <ui:MultipleAssign.AssignOperations>
                                                                        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                                                                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
                                                                            <ui:AssignOperation.To>
                                                                              <OutArgument x:TypeArguments="x:Int32">[initial_rows]</OutArgument>
                                                                            </ui:AssignOperation.To>
                                                                            <ui:AssignOperation.Value>
                                                                              <InArgument x:TypeArguments="x:Int32">[initial_rows + 1]</InArgument>
                                                                            </ui:AssignOperation.Value>
                                                                          </ui:AssignOperation>
                                                                          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_7">
                                                                            <ui:AssignOperation.To>
                                                                              <OutArgument x:TypeArguments="x:Int32">[row_count]</OutArgument>
                                                                            </ui:AssignOperation.To>
                                                                            <ui:AssignOperation.Value>
                                                                              <InArgument x:TypeArguments="x:Int32">[row_count + 1]</InArgument>
                                                                            </ui:AssignOperation.Value>
                                                                          </ui:AssignOperation>
                                                                        </scg:List>
                                                                      </ui:MultipleAssign.AssignOperations>
                                                                      <sap:WorkflowViewStateService.ViewState>
                                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                        </scg:Dictionary>
                                                                      </sap:WorkflowViewStateService.ViewState>
                                                                    </ui:MultipleAssign>
                                                                    <ui:IfElseIf DisplayName="Else If" sap:VirtualizedContainerService.HintSize="527,489" sap2010:WorkflowViewState.IdRef="IfElseIf_4">
                                                                      <ui:IfElseIf.ConditionBlocks>
                                                                        <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
                                                                          <ui:IfElseIfBlock BlockType="If" Condition="[initial_rows &gt; 13]">
                                                                            <ui:IfElseIfBlock.Then>
                                                                              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="476,285" sap2010:WorkflowViewState.IdRef="Sequence_62">
                                                                                <sap:WorkflowViewStateService.ViewState>
                                                                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                                                  </scg:Dictionary>
                                                                                </sap:WorkflowViewStateService.ViewState>
                                                                                <ueab:InsertRowsX DisplayName="Insert Rows for every software description" HasHeaders="False" sap:VirtualizedContainerService.HintSize="434,195" sap2010:WorkflowViewState.IdRef="InsertRowsX_1" InsertPosition="Start" NbOfRows="1" Range="[Excel.Sheet(&quot;Sheet1&quot;).Range(&quot;B&quot;+(initial_rows).ToString + &quot;:G&quot; + (initial_rows).ToString)]" SpecificIndex="[initial_rows]">
                                                                                  <sap:WorkflowViewStateService.ViewState>
                                                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                                    </scg:Dictionary>
                                                                                  </sap:WorkflowViewStateService.ViewState>
                                                                                </ueab:InsertRowsX>
                                                                              </Sequence>
                                                                            </ui:IfElseIfBlock.Then>
                                                                          </ui:IfElseIfBlock>
                                                                        </sc:BindingList>
                                                                      </ui:IfElseIf.ConditionBlocks>
                                                                      <sap:WorkflowViewStateService.ViewState>
                                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                                        </scg:Dictionary>
                                                                      </sap:WorkflowViewStateService.ViewState>
                                                                    </ui:IfElseIf>
                                                                  </Sequence>
                                                                </ui:IfElseIfBlock.Then>
                                                              </ui:IfElseIfBlock>
                                                            </sc:BindingList>
                                                          </ui:IfElseIf.ConditionBlocks>
                                                          <sap:WorkflowViewStateService.ViewState>
                                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                            </scg:Dictionary>
                                                          </sap:WorkflowViewStateService.ViewState>
                                                        </ui:IfElseIf>
                                                      </Sequence>
                                                    </ActivityAction>
                                                  </ui:ForEachRow.Body>
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ui:ForEachRow>
                                                <ueab:WriteCellX Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;G&quot; + (row_count+14-1).ToString)]" DisplayName="Write Cell Total Amount" sap:VirtualizedContainerService.HintSize="696,168" sap2010:WorkflowViewState.IdRef="WriteCellX_26" Value="[total_Value]">
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ueab:WriteCellX>
                                                <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim Amt_Before_Decimal, Amt_After_Decimal, Country_currency, Decimal_Singular, Decimal_Plural As String&#xA;Dim  DecimalCount, DecimalCount_1, DecimalCount_10 As String&#xA;Dim Before_Amt, After_Amt As String&#xA;Dim DecimalPlace As Int32&#xA;Dim regex As Regex = New System.Text.RegularExpressions.Regex(&quot;(1[\.,])?([0-9]{1,3}[\.,])?(1[\.,])?([0-9]{1,3}[\.,])?([0-9]{1,3})([\.,][0-9]{1,2})&quot;)&#xA;&#xA;Dim match As Match = regex.Match(MyNumber)&#xA;If match.Success Then&#xA;&#x9;&#x9;Console.WriteLine(&quot;RESULT: [{0}]&quot;, match.Value)&#xA;&#x9;&#x9;MyNumber = match.Value &#xA;&#x9;End If&#xA;&#xA;MyNumber = Trim(Str(MyNumber)) ' String representation of amount.&#xA;&#xA;DecimalPlace = InStr(MyNumber, &quot;.&quot;) ' Position of decimal place 0 if none.&#xA;&#xA;If DecimalPlace &gt; 1  Then&#xA;Before_Amt = left(MyNumber,DecimalPlace-1)&#xA;Else If DecimalPlace = 0 And len(MyNumber) &gt; 0 Then&#xA;Before_Amt = MyNumber&#xA;Else &#xA;&#x9;Before_Amt = &quot;&quot;&#xA;End If&#xA;Num2Word = Before_Amt&#xA;&#xA;&#xA;&#xA;&#xA;'''''''''''''' VARIABLES FOR NUMBERS '''''''''''''''''''&#xA;&#xA;Dim Digit, GetDigit, Tens, GetTens, Hundreds, GetHundreds As String&#xA;&#xA;Dim Thousands, GetThousands, GetThousands_1, GetThousands_10, GetThousands_100 As String&#xA;&#xA;Dim Millions, GetMillions, GetMillions_1, GetMillions_10, GetMillions_100 As String&#xA;&#xA;Dim Billions, GetBillions, GetBillions_1, GetBillions_10, GetBillions_100 As String&#xA;&#xA;Dim Trillions, GetTrillions, GetTrillions_1, GetTrillions_10, GetTrillions_100 As String&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''''' ONES ''''''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)=1 Or (Left(right(Before_Amt,2),1)= &quot;0&quot; Or Left(right(Before_Amt,2),1)&lt;&gt; &quot;1&quot;) Then&#xA;Digit = Right(Before_Amt,1)&#xA;Select Case Digit&#xA; Case &quot;1&quot; : GetDigit=&quot;One&quot;&#xA; Case &quot;2&quot; : GetDigit=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetDigit=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetDigit=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetDigit=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetDigit=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetDigit=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetDigit=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetDigit=&quot;Nine&quot; &#xA; Case Else: GetDigit = &quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''''' TENS ''''''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)&gt;=2 And Left(right(Before_Amt,2),1)= &quot;1&quot; Then&#xA;&#xA;Tens = right(Before_Amt,2)&#xA;&#xA;Select Case Tens&#xA; Case &quot;10&quot; : GetTens=&quot;Ten&quot;&#xA; Case &quot;11&quot; : GetTens=&quot;Eleven&quot;&#xA; Case &quot;12&quot; : GetTens=&quot;Twelve&quot;&#xA; Case &quot;13&quot; : GetTens=&quot;Thirteen&quot;&#xA; Case &quot;14&quot; : GetTens=&quot;Forteen&quot;&#xA; Case &quot;15&quot; : GetTens=&quot;Fifteen&quot;&#xA; Case &quot;16&quot; : GetTens=&quot;Sixteen&quot;&#xA; Case &quot;17&quot; : GetTens=&quot;Seventeen&quot;&#xA; Case &quot;18&quot; : GetTens=&quot;Eighteen&quot;&#xA; Case &quot;19&quot; : GetTens=&quot;Nineteen&quot;&#xA; Case Else : GetTens=&quot;&quot;&#xA; End Select&#xA;&#xA;ElseIf Len(Before_Amt)&gt;=2 And Left(right(Before_Amt,2),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Tens = Left(right(Before_Amt,2),1)&#xA;&#xA;Select Case Tens&#xA; Case &quot;2&quot; : GetTens=&quot;Twenty&quot;&#xA; Case &quot;3&quot; : GetTens=&quot;Thirty&quot;&#xA; Case &quot;4&quot; : GetTens=&quot;Fourty&quot;&#xA; Case &quot;5&quot; : GetTens=&quot;Fifty&quot;&#xA; Case &quot;6&quot; : GetTens=&quot;Sixty&quot;&#xA; Case &quot;7&quot; : GetTens=&quot;Seventy&quot;&#xA; Case &quot;8&quot; : GetTens=&quot;Eighty&quot;&#xA; Case &quot;9&quot; : GetTens=&quot;Ninety&quot;&#xA; Case Else : GetTens=&quot;&quot;&#xA; End Select&#xA; End If&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;''''''''''''''''' HUNDREDS '''''''''''''''''''''''''''&#xA;&#xA;&#xA;If Len(Before_Amt)&gt;=3 And Left(right(Before_Amt,3),1)&lt;&gt; &quot;0&quot; Then&#xA;&#xA;Hundreds = Left(right(Before_Amt,3),1)&#xA;&#xA;Select Case Hundreds&#xA; Case &quot;1&quot; : GetHundreds=&quot;One&quot;&#xA; Case &quot;2&quot; : GetHundreds=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetHundreds=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetHundreds=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetHundreds=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetHundreds=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetHundreds=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetHundreds=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetHundreds=&quot;Nine&quot; &#xA; Case Else: GetHundreds = &quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;If GetHundreds&lt;&gt;&quot;&quot; Then&#xA;&#xA;GetHundreds = GetHundreds &amp; &quot; Hundred&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;''''''''''''''''' THOUSANDS ''''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)=4 Then&#xA;&#xA;Thousands = Left(right(Before_Amt,4),1)&#xA;&#xA;Select Case Thousands&#xA; Case &quot;1&quot; : GetThousands_1=&quot;One&quot;&#xA; Case &quot;2&quot; : GetThousands_1=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetThousands_1=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetThousands_1=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetThousands_1=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetThousands_1=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetThousands_1=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetThousands_1=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetThousands_1=&quot;Nine&quot;&#xA; Case Else: GetThousands_1 = &quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(Before_Amt)&gt; 4 And Left(right(Before_Amt,5),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Thousands = Left(right(Before_Amt,4),1)&#xA;&#xA;Select Case Thousands&#xA; Case &quot;1&quot; : GetThousands_1=&quot;One&quot;&#xA; Case &quot;2&quot; : GetThousands_1=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetThousands_1=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetThousands_1=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetThousands_1=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetThousands_1=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetThousands_1=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetThousands_1=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetThousands_1=&quot;Nine&quot;&#xA; Case Else: GetThousands_1 = &quot;&quot;&#xA; End Select&#xA;&#xA; End If&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)&gt;=5 And Left(right(Before_Amt,5),1)&lt;&gt; &quot;0&quot; And Left(right(Before_Amt,5),1)= &quot;1&quot; Then&#xA;&#xA;&#xA;Thousands = Left(right(Before_Amt,5),2)&#xA;&#xA;Select Case Thousands&#xA; Case &quot;10&quot; : GetThousands_10=&quot;Ten&quot;&#xA; Case &quot;11&quot; : GetThousands_10=&quot;Eleven&quot;&#xA; Case &quot;12&quot; : GetThousands_10=&quot;Twelve&quot;&#xA; Case &quot;13&quot; : GetThousands_10=&quot;Thirteen&quot;&#xA; Case &quot;14&quot; : GetThousands_10=&quot;Forteen&quot;&#xA; Case &quot;15&quot; : GetThousands_10=&quot;Fifteen&quot;&#xA; Case &quot;16&quot; : GetThousands_10=&quot;Sixteen&quot;&#xA; Case &quot;17&quot; : GetThousands_10=&quot;Seventeen&quot;&#xA; Case &quot;18&quot; : GetThousands_10=&quot;Eighteen&quot;&#xA; Case &quot;19&quot; : GetThousands_10=&quot;Nineteen&quot;&#xA; Case Else : GetThousands_10=&quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(Before_Amt)&gt;=5 And Left(right(Before_Amt,5),1)&lt;&gt; &quot;0&quot; And Left(right(Before_Amt,5),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Thousands = Left(right(Before_Amt,5),1)&#xA;&#xA;Select Case Thousands&#xA; Case &quot;2&quot; : GetThousands_10=&quot;Twenty&quot;&#xA; Case &quot;3&quot; : GetThousands_10=&quot;Thirty&quot;&#xA; Case &quot;4&quot; : GetThousands_10=&quot;Fourty&quot;&#xA; Case &quot;5&quot; : GetThousands_10=&quot;Fifty&quot;&#xA; Case &quot;6&quot; : GetThousands_10=&quot;Sixty&quot;&#xA; Case &quot;7&quot; : GetThousands_10=&quot;Seventy&quot;&#xA; Case &quot;8&quot; : GetThousands_10=&quot;Eighty&quot;&#xA; Case &quot;9&quot; : GetThousands_10=&quot;Ninety&quot;&#xA; Case Else : GetThousands_10=&quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)&gt;=6 And Left(right(Before_Amt,6),1)&lt;&gt; &quot;0&quot; Then&#xA;&#xA;Thousands = Left(right(Before_Amt,6),1)&#xA;&#xA;Select Case Thousands&#xA; Case &quot;1&quot; : GetThousands_100=&quot;One&quot;&#xA; Case &quot;2&quot; : GetThousands_100=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetThousands_100=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetThousands_100=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetThousands_100=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetThousands_100=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetThousands_100=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetThousands_100=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetThousands_100=&quot;Nine&quot; &#xA; Case Else: GetThousands_100 = &quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;If GetThousands_100&lt;&gt;&quot;&quot; Then&#xA;&#xA;GetThousands_100 = GetThousands_100 &amp; &quot; Hundred&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;&#xA;If GetThousands_100=&quot;&quot; And GetThousands_10=&quot;&quot; And GetThousands_1=&quot;&quot; Then&#xA;&#xA;GetThousands = &quot;&quot;&#xA;&#xA;Else &#xA;&#x9;GetThousands = GetThousands_100 &amp;&quot; &quot; &amp; GetThousands_10 &amp; &quot; &quot; &amp; GetThousands_1 &amp; &quot; Thousand&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''' MILLIONS ''''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)=7 Then&#xA;&#xA;Millions = Left(right(Before_Amt,7),1)&#xA;&#xA;Select Case Millions&#xA; Case &quot;1&quot; : GetMillions_1=&quot;One&quot;&#xA; Case &quot;2&quot; : GetMillions_1=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetMillions_1=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetMillions_1=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetMillions_1=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetMillions_1=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetMillions_1=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetMillions_1=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetMillions_1=&quot;Nine&quot;&#xA; Case Else: GetMillions_1 = &quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(Before_Amt)&gt;=7 And Left(right(Before_Amt,8),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Millions = Left(right(Before_Amt,7),1)&#xA;&#xA;Select Case Millions&#xA; Case &quot;1&quot; : GetMillions_1=&quot;One&quot;&#xA; Case &quot;2&quot; : GetMillions_1=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetMillions_1=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetMillions_1=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetMillions_1=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetMillions_1=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetMillions_1=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetMillions_1=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetMillions_1=&quot;Nine&quot;&#xA; Case Else: GetMillions_1 = &quot;&quot;&#xA; End Select&#xA;&#xA;&#xA; End If&#xA;&#xA;If Len(Before_Amt)&gt;=8 And Left(right(Before_Amt,8),1)&lt;&gt; &quot;0&quot; And Left(right(Before_Amt,8),1)= &quot;1&quot; Then&#xA;&#xA;&#xA;Millions = Left(right(Before_Amt,8),2)&#xA;&#xA;Select Case Millions&#xA; Case &quot;10&quot; : GetMillions_10=&quot;Ten&quot;&#xA; Case &quot;11&quot; : GetMillions_10=&quot;Eleven&quot;&#xA; Case &quot;12&quot; : GetMillions_10=&quot;Twelve&quot;&#xA; Case &quot;13&quot; : GetMillions_10=&quot;Thirteen&quot;&#xA; Case &quot;14&quot; : GetMillions_10=&quot;Forteen&quot;&#xA; Case &quot;15&quot; : GetMillions_10=&quot;Fifteen&quot;&#xA; Case &quot;16&quot; : GetMillions_10=&quot;Sixteen&quot;&#xA; Case &quot;17&quot; : GetMillions_10=&quot;Seventeen&quot;&#xA; Case &quot;18&quot; : GetMillions_10=&quot;Eighteen&quot;&#xA; Case &quot;19&quot; : GetMillions_10=&quot;Nineteen&quot;&#xA; Case Else : GetMillions_10=&quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(Before_Amt)&gt;=8 And Left(right(Before_Amt,8),1)&lt;&gt; &quot;0&quot; And Left(right(Before_Amt,8),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Millions = Left(right(Before_Amt,8),1)&#xA;&#xA;Select Case Millions&#xA; Case &quot;2&quot; : GetMillions_10=&quot;Twenty&quot;&#xA; Case &quot;3&quot; : GetMillions_10=&quot;Thirty&quot;&#xA; Case &quot;4&quot; : GetMillions_10=&quot;Fourty&quot;&#xA; Case &quot;5&quot; : GetMillions_10=&quot;Fifty&quot;&#xA; Case &quot;6&quot; : GetMillions_10=&quot;Sixty&quot;&#xA; Case &quot;7&quot; : GetMillions_10=&quot;Seventy&quot;&#xA; Case &quot;8&quot; : GetMillions_10=&quot;Eighty&quot;&#xA; Case &quot;9&quot; : GetMillions_10=&quot;Ninety&quot;&#xA; Case Else : GetMillions_10=&quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)&gt;=9 And Left(right(Before_Amt,9),1)&lt;&gt; &quot;0&quot; Then&#xA;&#xA;Millions = Left(right(Before_Amt,9),1)&#xA;&#xA;Select Case Millions&#xA; Case &quot;1&quot; : GetMillions_100=&quot;One&quot;&#xA; Case &quot;2&quot; : GetMillions_100=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetMillions_100=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetMillions_100=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetMillions_100=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetMillions_100=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetMillions_100=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetMillions_100=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetMillions_100=&quot;Nine&quot; &#xA; Case Else: GetMillions_100 = &quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;If GetMillions_100&lt;&gt;&quot;&quot; Then&#xA;&#xA;GetMillions_100 = GetMillions_100 &amp; &quot; Hundred&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;&#xA;If GetMillions_100=&quot;&quot; And GetMillions_10=&quot;&quot; And GetMillions_1=&quot;&quot; Then&#xA;&#xA;GetMillions = &quot;&quot;&#xA;&#xA;Else &#xA;&#x9;GetMillions = GetMillions_100 &amp;&quot; &quot; &amp; GetMillions_10 &amp; &quot; &quot; &amp; GetMillions_1 &amp; &quot; Million&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''' BILLIONS ''''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)=10 Then&#xA;&#xA;Billions = Left(right(Before_Amt,10),1)&#xA;&#xA;Select Case Billions&#xA; Case &quot;1&quot; : GetBillions_1=&quot;One&quot;&#xA; Case &quot;2&quot; : GetBillions_1=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetBillions_1=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetBillions_1=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetBillions_1=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetBillions_1=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetBillions_1=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetBillions_1=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetBillions_1=&quot;Nine&quot;&#xA; Case Else: GetBillions_1 = &quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(Before_Amt)&gt;=10 And Left(right(Before_Amt,11),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Billions = Left(right(Before_Amt,10),1)&#xA;&#xA;Select Case Billions&#xA; Case &quot;1&quot; : GetBillions_1=&quot;One&quot;&#xA; Case &quot;2&quot; : GetBillions_1=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetBillions_1=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetBillions_1=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetBillions_1=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetBillions_1=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetBillions_1=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetBillions_1=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetBillions_1=&quot;Nine&quot;&#xA; Case Else: GetBillions_1 = &quot;&quot;&#xA; End Select&#xA; End If&#xA;&#xA;If Len(Before_Amt)&gt;=11 And Left(right(Before_Amt,11),1)&lt;&gt; &quot;0&quot; And Left(right(Before_Amt,11),1)= &quot;1&quot; Then&#xA;&#xA;&#xA;Billions = Left(right(Before_Amt,11),2)&#xA;&#xA;Select Case Billions&#xA; Case &quot;10&quot; : GetBillions_10=&quot;Ten&quot;&#xA; Case &quot;11&quot; : GetBillions_10=&quot;Eleven&quot;&#xA; Case &quot;12&quot; : GetBillions_10=&quot;Twelve&quot;&#xA; Case &quot;13&quot; : GetBillions_10=&quot;Thirteen&quot;&#xA; Case &quot;14&quot; : GetBillions_10=&quot;Forteen&quot;&#xA; Case &quot;15&quot; : GetBillions_10=&quot;Fifteen&quot;&#xA; Case &quot;16&quot; : GetBillions_10=&quot;Sixteen&quot;&#xA; Case &quot;17&quot; : GetBillions_10=&quot;Seventeen&quot;&#xA; Case &quot;18&quot; : GetBillions_10=&quot;Eighteen&quot;&#xA; Case &quot;19&quot; : GetBillions_10=&quot;Nineteen&quot;&#xA; Case Else : GetBillions_10=&quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(Before_Amt)&gt;=11 And Left(right(Before_Amt,11),1)&lt;&gt; &quot;0&quot; And Left(right(Before_Amt,11),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Billions = Left(right(Before_Amt,11),1)&#xA;&#xA;Select Case Billions&#xA; Case &quot;2&quot; : GetBillions_10=&quot;Twenty&quot;&#xA; Case &quot;3&quot; : GetBillions_10=&quot;Thirty&quot;&#xA; Case &quot;4&quot; : GetBillions_10=&quot;Fourty&quot;&#xA; Case &quot;5&quot; : GetBillions_10=&quot;Fifty&quot;&#xA; Case &quot;6&quot; : GetBillions_10=&quot;Sixty&quot;&#xA; Case &quot;7&quot; : GetBillions_10=&quot;Seventy&quot;&#xA; Case &quot;8&quot; : GetBillions_10=&quot;Eighty&quot;&#xA; Case &quot;9&quot; : GetBillions_10=&quot;Ninety&quot;&#xA; Case Else : GetBillions_10=&quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)&gt;=12 And Left(right(Before_Amt,12),1)&lt;&gt; &quot;0&quot; Then&#xA;&#xA;Billions = Left(right(Before_Amt,12),1)&#xA;&#xA;Select Case Billions&#xA; Case &quot;1&quot; : GetBillions_100=&quot;One&quot;&#xA; Case &quot;2&quot; : GetBillions_100=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetBillions_100=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetBillions_100=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetBillions_100=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetBillions_100=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetBillions_100=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetBillions_100=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetBillions_100=&quot;Nine&quot; &#xA; Case Else: GetBillions_100 = &quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;If GetBillions_100&lt;&gt;&quot;&quot; Then&#xA;&#xA;GetBillions_100 = GetBillions_100 &amp; &quot; Hundred&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;&#xA;If GetBillions_100=&quot;&quot; And GetBillions_10=&quot;&quot; And GetBillions_1=&quot;&quot; Then&#xA;&#xA;GetBillions = &quot;&quot;&#xA;&#xA;Else &#xA;&#x9;GetBillions = GetBillions_100 &amp;&quot; &quot; &amp; GetBillions_10 &amp; &quot; &quot; &amp; GetBillions_1 &amp; &quot; Billion&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''' TRILLIONS '''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)=13 Then&#xA;&#xA;Trillions = Left(right(Before_Amt,13),1)&#xA;&#xA;Select Case Trillions&#xA; Case &quot;1&quot; : GetTrillions_1=&quot;One&quot;&#xA; Case &quot;2&quot; : GetTrillions_1=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetTrillions_1=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetTrillions_1=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetTrillions_1=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetTrillions_1=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetTrillions_1=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetTrillions_1=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetTrillions_1=&quot;Nine&quot;&#xA; Case Else: GetTrillions_1 = &quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(Before_Amt)&gt;13 And Left(right(Before_Amt,14),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Trillions = Left(right(Before_Amt,13),1)&#xA;&#xA;Select Case Trillions&#xA; Case &quot;1&quot; : GetTrillions_1=&quot;One&quot;&#xA; Case &quot;2&quot; : GetTrillions_1=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetTrillions_1=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetTrillions_1=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetTrillions_1=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetTrillions_1=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetTrillions_1=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetTrillions_1=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetTrillions_1=&quot;Nine&quot;&#xA; Case Else: GetTrillions_1 = &quot;&quot;&#xA; End Select&#xA; End If&#xA;&#xA;If Len(Before_Amt)&gt;=14 And Left(right(Before_Amt,14),1)&lt;&gt; &quot;0&quot; And Left(right(Before_Amt,14),1)= &quot;1&quot; Then&#xA;&#xA;&#xA;Trillions = Left(right(Before_Amt,14),2)&#xA;&#xA;Select Case Trillions&#xA; Case &quot;10&quot; : GetTrillions_10=&quot;Ten&quot;&#xA; Case &quot;11&quot; : GetTrillions_10=&quot;Eleven&quot;&#xA; Case &quot;12&quot; : GetTrillions_10=&quot;Twelve&quot;&#xA; Case &quot;13&quot; : GetTrillions_10=&quot;Thirteen&quot;&#xA; Case &quot;14&quot; : GetTrillions_10=&quot;Forteen&quot;&#xA; Case &quot;15&quot; : GetTrillions_10=&quot;Fifteen&quot;&#xA; Case &quot;16&quot; : GetTrillions_10=&quot;Sixteen&quot;&#xA; Case &quot;17&quot; : GetTrillions_10=&quot;Seventeen&quot;&#xA; Case &quot;18&quot; : GetTrillions_10=&quot;Eighteen&quot;&#xA; Case &quot;19&quot; : GetTrillions_10=&quot;Nineteen&quot;&#xA; Case Else : GetTrillions_10=&quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(Before_Amt)&gt;=14 And Left(right(Before_Amt,14),1)&lt;&gt; &quot;0&quot; And Left(right(Before_Amt,14),1)&lt;&gt; &quot;1&quot; Then&#xA;&#xA;Trillions = Left(right(Before_Amt,14),1)&#xA;&#xA;Select Case Trillions&#xA; Case &quot;2&quot; : GetTrillions_10=&quot;Twenty&quot;&#xA; Case &quot;3&quot; : GetTrillions_10=&quot;Thirty&quot;&#xA; Case &quot;4&quot; : GetTrillions_10=&quot;Fourty&quot;&#xA; Case &quot;5&quot; : GetTrillions_10=&quot;Fifty&quot;&#xA; Case &quot;6&quot; : GetTrillions_10=&quot;Sixty&quot;&#xA; Case &quot;7&quot; : GetTrillions_10=&quot;Seventy&quot;&#xA; Case &quot;8&quot; : GetTrillions_10=&quot;Eighty&quot;&#xA; Case &quot;9&quot; : GetTrillions_10=&quot;Ninety&quot;&#xA; Case Else : GetTrillions_10=&quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;&#xA;&#xA;If Len(Before_Amt)&gt;=15 And Left(right(Before_Amt,15),1)&lt;&gt; &quot;0&quot; Then&#xA;&#xA;Trillions = Left(right(Before_Amt,15),1)&#xA;&#xA;Select Case Trillions&#xA; Case &quot;1&quot; : GetTrillions_100=&quot;One&quot;&#xA; Case &quot;2&quot; : GetTrillions_100=&quot;Two&quot;&#xA; Case &quot;3&quot; : GetTrillions_100=&quot;Three&quot;&#xA; Case &quot;4&quot; : GetTrillions_100=&quot;Four&quot;&#xA; Case &quot;5&quot; : GetTrillions_100=&quot;Five&quot;&#xA; Case &quot;6&quot; : GetTrillions_100=&quot;Six&quot;&#xA; Case &quot;7&quot; : GetTrillions_100=&quot;Seven&quot;&#xA; Case &quot;8&quot; : GetTrillions_100=&quot;Eight&quot;&#xA; Case &quot;9&quot; : GetTrillions_100=&quot;Nine&quot; &#xA; Case Else: GetTrillions_100 = &quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;If GetTrillions_100&lt;&gt;&quot;&quot; Then&#xA;&#xA;GetTrillions_100 = GetTrillions_100 &amp; &quot; Hundred&quot;&#xA;&#xA;End If&#xA;&#xA;If GetTrillions_100=&quot;&quot; And GetTrillions_10=&quot;&quot; And GetTrillions_1=&quot;&quot; Then&#xA;&#xA;GetTrillions = &quot;&quot;&#xA;&#xA;Else &#xA;&#x9;GetTrillions = GetTrillions_100 &amp;&quot; &quot; &amp; GetTrillions_10 &amp; &quot; &quot; &amp; GetTrillions_1 &amp; &quot; Trillion&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;&#xA;Amt_Before_Decimal = GetTrillions &amp; &quot; &quot; &amp;GetBillions &amp; &quot; &quot; &amp;GetMillions &amp; &quot; &quot; &amp; GetThousands &amp; &quot; &quot; &amp; GetHundreds &amp; &quot; &quot; &amp; GetTens &amp; &quot; &quot; &amp; GetDigit&#xA;&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''' BEFORE DECIMAL ENDS HERE '''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;&#xA;'''''''''''''''''' DECIMALS '''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;If DecimalPlace &lt;&gt; 0 Then&#xA;&#xA;DecimalCount = Mid(MyNumber.ToString, InStr(MyNumber.ToString, &quot;.&quot;)+1, MyNumber.ToString.count - InStr(MyNumber.ToString, &quot;.&quot;))&#xA;&#xA;&#xA;If Len(DecimalCount)=2 And left(DecimalCount,1) &lt;&gt; &quot;1&quot; Then&#xA;&#xA;Select Case right(DecimalCount,1)&#xA; Case &quot;1&quot; : DecimalCount_1 = &quot;One&quot;&#xA; Case &quot;2&quot; : DecimalCount_1 = &quot;Two&quot;&#xA; Case &quot;3&quot; : DecimalCount_1 = &quot;Three&quot;&#xA; Case &quot;4&quot; : DecimalCount_1 = &quot;Four&quot;&#xA; Case &quot;5&quot; : DecimalCount_1 = &quot;Five&quot;&#xA; Case &quot;6&quot; : DecimalCount_1 = &quot;Six&quot;&#xA; Case &quot;7&quot; : DecimalCount_1 = &quot;Seven&quot;&#xA; Case &quot;8&quot; : DecimalCount_1 = &quot;Eight&quot;&#xA; Case &quot;9&quot; : DecimalCount_1 = &quot;Nine&quot; &#xA; Case Else: DecimalCount_1 = &quot;&quot;&#xA; End Select&#xA;End If&#xA;&#xA;If Len(DecimalCount)&lt;&gt;0 And left(DecimalCount,1) &lt;&gt; &quot;0&quot; And left(DecimalCount,1) = &quot;1&quot;&#xA;&#xA;Select Case DecimalCount&#xA; Case &quot;1&quot;  : DecimalCount_10 = &quot;Ten&quot;&#xA; Case &quot;10&quot; : DecimalCount_10 = &quot;Ten&quot;&#xA; Case &quot;11&quot; : DecimalCount_10 = &quot;Eleven&quot;&#xA; Case &quot;12&quot; : DecimalCount_10 = &quot;Twelve&quot;&#xA; Case &quot;13&quot; : DecimalCount_10 = &quot;Thirteen&quot;&#xA; Case &quot;14&quot; : DecimalCount_10 = &quot;Forteen&quot;&#xA; Case &quot;15&quot; : DecimalCount_10 = &quot;Fifteen&quot;&#xA; Case &quot;16&quot; : DecimalCount_10 = &quot;Sixteen&quot;&#xA; Case &quot;17&quot; : DecimalCount_10 = &quot;Seventeen&quot;&#xA; Case &quot;18&quot; : DecimalCount_10 = &quot;Eighteen&quot;&#xA; Case &quot;19&quot; : DecimalCount_10 = &quot;Nineteen&quot;&#xA; Case Else : DecimalCount_10 = &quot;&quot;&#xA; End Select&#xA;&#xA;Else If Len(DecimalCount)&lt;&gt;0 And left(DecimalCount,1) &lt;&gt; &quot;0&quot; And left(DecimalCount,1) &lt;&gt; &quot;1&quot;&#xA;&#xA;Select Case left(DecimalCount,1)&#xA; Case &quot;2&quot; : DecimalCount_10 = &quot;Twenty&quot;&#xA; Case &quot;3&quot; : DecimalCount_10 = &quot;Thirty&quot;&#xA; Case &quot;4&quot; : DecimalCount_10 = &quot;Fourty&quot;&#xA; Case &quot;5&quot; : DecimalCount_10 = &quot;Fifty&quot;&#xA; Case &quot;6&quot; : DecimalCount_10 = &quot;Sixty&quot;&#xA; Case &quot;7&quot; : DecimalCount_10 = &quot;Seventy&quot;&#xA; Case &quot;8&quot; : DecimalCount_10 = &quot;Eighty&quot;&#xA; Case &quot;9&quot; : DecimalCount_10 = &quot;Ninety&quot;&#xA; Case Else : DecimalCount_10 = &quot;&quot;&#xA; End Select&#xA; End If&#xA;&#xA;Amt_After_Decimal = &quot; &quot; &amp; DecimalCount_10 &amp; &quot; &quot; &amp; DecimalCount_1&#xA;&#xA;Else If DecimalPlace = 0 Then&#xA;&#xA;Amt_After_Decimal = &quot;&quot;&#xA;&#xA;End If&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''' AFTER DECIMAL ENDS HERE '''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''''''''' COUNTRY TYPE AND CURRENCY '''''''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;Select UCase(Curr_Type)&#xA;&#xA;&#xA;Case &quot;AFN&quot;                          'Country:  Afghanistan         Currency : Afghan afghani&#xA;Country_currency = &quot;Afghani&quot;   &#xA;Decimal_Singular = &quot;Pul&quot;&#xA;Decimal_Plural = &quot;Pul&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Akrotiri and Dhekelia (UK)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Aland Islands (Finland)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;ALL&quot;                          'Country:  Albania         Currency : Albanian lek&#xA;Country_currency = &quot;lek&quot;   &#xA;Decimal_Singular = &quot;Qindarkë&quot;&#xA;Decimal_Plural = &quot;Qindarka&quot;&#xA;&#xA;&#xA;Case &quot;DZD&quot;                          'Country:  Algeria         Currency : Algerian dinar&#xA;Country_currency = &quot;Dinar&quot;   &#xA;Decimal_Singular = &quot;Santeem&quot;&#xA;Decimal_Plural = &quot;Santeems&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  American Samoa (USA)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Andorra         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;AOA&quot;                          'Country:  Angola         Currency : Angolan kwanza&#xA;Country_currency = &quot;Kwanza&quot;   &#xA;Decimal_Singular = &quot;Cêntimo&quot;&#xA;Decimal_Plural = &quot;Cêntimo&quot;&#xA;&#xA;&#xA;Case &quot;XCD&quot;                          'Country:  Anguilla (UK)         Currency : East Caribbean dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XCD&quot;                          'Country:  Antigua and Barbuda         Currency : East Caribbean dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;ARS&quot;                          'Country:  Argentina         Currency : Argentine peso&#xA;Country_currency = &quot;Peso&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavos&quot;&#xA;&#xA;&#xA;Case &quot;AMD&quot;                          'Country:  Armenia         Currency : Armenian dram&#xA;Country_currency = &quot;Dram&quot;   &#xA;Decimal_Singular = &quot;Luma&quot;&#xA;Decimal_Plural = &quot;Luma&quot;&#xA;&#xA;&#xA;Case &quot;AWG&quot;                          'Country:  Aruba (Netherlands)         Currency : Aruban florin&#xA;Country_currency = &quot;Florin&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;SHP&quot;                          'Country:  Ascension Island (UK)         Currency : Saint Helena pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;AUD&quot;                          'Country:  Australia         Currency : Australian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Austria         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;AZN&quot;                          'Country:  Azerbaijan         Currency : Azerbaijan manat&#xA;Country_currency = &quot;Manat&quot;   &#xA;Decimal_Singular = &quot;Qəpik&quot;&#xA;Decimal_Plural = &quot;Qəpik&quot;&#xA;&#xA;&#xA;Case &quot;BSD&quot;                          'Country:  Bahamas         Currency : Bahamian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;BHD&quot;                          'Country:  Bahrain         Currency : Bahraini dinar&#xA;Country_currency = &quot;Dinar&quot;   &#xA;Decimal_Singular = &quot;Fils&quot;&#xA;Decimal_Plural = &quot;Fils&quot;&#xA;&#xA;&#xA;Case &quot;BDT&quot;                          'Country:  Bangladesh         Currency : Bangladeshi taka&#xA;Country_currency = &quot;Taka&quot;   &#xA;Decimal_Singular = &quot;Poisha&quot;&#xA;Decimal_Plural = &quot;Poisha&quot;&#xA;&#xA;&#xA;Case &quot;BBD&quot;                          'Country:  Barbados         Currency : Barbadian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;BYN&quot;                          'Country:  Belarus         Currency : Belarusian ruble&#xA;Country_currency = &quot;Ruble&quot;   &#xA;Decimal_Singular = &quot;Kapiejka&quot;&#xA;Decimal_Plural = &quot;Kapiejka&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Belgium         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;BZD&quot;                          'Country:  Belize         Currency : Belize dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XOF&quot;                          'Country:  Benin         Currency : West African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;BMD&quot;                          'Country:  Bermuda (UK)         Currency : Bermudian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;BTN&quot;                          'Country:  Bhutan         Currency : Bhutanese ngultrum&#xA;Country_currency = &quot;Ngultrum&quot;   &#xA;Decimal_Singular = &quot;Chetrum&quot;&#xA;Decimal_Plural = &quot;Chetrums&quot;&#xA;&#xA;&#xA;Case &quot;BOB&quot;                          'Country:  Bolivia         Currency : Bolivian boliviano&#xA;Country_currency = &quot;Boliviano&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavos&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Bonaire (Netherlands)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;BAM&quot;                          'Country:  Bosnia and Herzegovina         Currency : Bosnia and Herzegovina convertible mark&#xA;Country_currency = &quot;Mark&quot;   &#xA;Decimal_Singular = &quot;Fening&quot;&#xA;Decimal_Plural = &quot;Fenings&quot;&#xA;&#xA;&#xA;Case &quot;BWP&quot;                          'Country:  Botswana         Currency : Botswana pula&#xA;Country_currency = &quot;Pula&quot;   &#xA;Decimal_Singular = &quot;Thebe&quot;&#xA;Decimal_Plural = &quot;Thebe&quot;&#xA;&#xA;&#xA;Case &quot;BRL&quot;                          'Country:  Brazil         Currency : Brazilian real&#xA;Country_currency = &quot;Real&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavos&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  British Indian Ocean Territory (UK)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  British Virgin Islands (UK)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;BND&quot;                          'Country:  Brunei         Currency : Brunei dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;BGN&quot;                          'Country:  Bulgaria         Currency : Bulgarian lev&#xA;Country_currency = &quot;Lev&quot;   &#xA;Decimal_Singular = &quot;Stotinka&quot;&#xA;Decimal_Plural = &quot;Stotinki&quot;&#xA;&#xA;&#xA;Case &quot;XOF&quot;                          'Country:  Burkina Faso         Currency : West African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;BIF&quot;                          'Country:  Burundi         Currency : Burundi franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;CVE&quot;                          'Country:  Cabo Verde         Currency : Cape Verdean escudo&#xA;Country_currency = &quot;Escudo&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavo&quot;&#xA;&#xA;&#xA;Case &quot;KHR&quot;                          'Country:  Cambodia         Currency : Cambodian riel&#xA;Country_currency = &quot;Riel&quot;   &#xA;Decimal_Singular = &quot;Sen&quot;&#xA;Decimal_Plural = &quot;Sen&quot;&#xA;&#xA;&#xA;Case &quot;XAF&quot;                          'Country:  Cameroon         Currency : Central African CFA franc&#xA;Country_currency = &quot;CFA Franc BEAC&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;CAD&quot;                          'Country:  Canada         Currency : Canadian dollar&#xA;Country_currency = &quot;Canadian Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Caribbean Netherlands (Netherlands)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;KYD&quot;                          'Country:  Cayman Islands (UK)         Currency : Cayman Islands dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XAF&quot;                          'Country:  Central African Republic         Currency : Central African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;XAF&quot;                          'Country:  Chad         Currency : Central African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;NZD&quot;                          'Country:  Chatham Islands (New Zealand)         Currency : New Zealand dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;CLP&quot;                          'Country:  Chile         Currency : Chilean peso&#xA;Country_currency = &quot;Peso&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavo&quot;&#xA;&#xA;&#xA;Case &quot;CNY&quot;                          'Country:  China         Currency : Chinese Yuan Renminbi&#xA;Country_currency = &quot;Yuan&quot;   &#xA;Decimal_Singular = &quot;Fen&quot;&#xA;Decimal_Plural = &quot;Fen&quot;&#xA;&#xA;&#xA;Case &quot;AUD&quot;                          'Country:  Christmas Island (Australia)         Currency : Australian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;AUD&quot;                          'Country:  Cocos (Keeling) Islands (Australia)         Currency : Australian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;COP&quot;                          'Country:  Colombia         Currency : Colombian peso&#xA;Country_currency = &quot;Peso&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavos&quot;&#xA;&#xA;&#xA;Case &quot;KMF&quot;                          'Country:  Comoros         Currency : Comorian franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centimes&quot;&#xA;&#xA;&#xA;Case &quot;CDF&quot;                          'Country:  Congo, Democratic Republic of the         Currency : Congolese franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centimes&quot;&#xA;&#xA;&#xA;Case &quot;XAF&quot;                          'Country:  Congo, Republic of the         Currency : Central African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;none&quot;                          'Country:  Cook Islands (New Zealand)         Currency : Cook Islands dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Tene&quot;&#xA;Decimal_Plural = &quot;Tene&quot;&#xA;&#xA;&#xA;Case &quot;CRC&quot;                          'Country:  Costa Rica         Currency : Costa Rican colon&#xA;Country_currency = &quot;Colon&quot;   &#xA;Decimal_Singular = &quot;Centimo&quot;&#xA;Decimal_Plural = &quot;Centimos&quot;&#xA;&#xA;&#xA;Case &quot;XOF&quot;                          'Country:  Cote d'Ivoire         Currency : West African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;HRK&quot;                          'Country:  Croatia         Currency : Croatian kuna&#xA;Country_currency = &quot;Kuna&quot;   &#xA;Decimal_Singular = &quot;Lipa&quot;&#xA;Decimal_Plural = &quot;Lipas&quot;&#xA;&#xA;&#xA;Case &quot;CUP&quot;                          'Country:  Cuba         Currency : Cuban peso&#xA;Country_currency = &quot;Cuban Peso&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavos&quot;&#xA;&#xA;&#xA;Case &quot;ANG&quot;                          'Country:  Curacao (Netherlands)         Currency : Netherlands Antillean guilder&#xA;Country_currency = &quot;Guilder&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Cyprus         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;CZK&quot;                          'Country:  Czech Republic         Currency : Czech koruna&#xA;Country_currency = &quot;Krona&quot;   &#xA;Decimal_Singular = &quot;Haler&quot;&#xA;Decimal_Plural = &quot;Halers&quot;&#xA;&#xA;&#xA;Case &quot;DKK&quot;                          'Country:  Denmark         Currency : Danish krone&#xA;Country_currency = &quot;Krone&quot;   &#xA;Decimal_Singular = &quot;Ore&quot;&#xA;Decimal_Plural = &quot;Ore&quot;&#xA;&#xA;&#xA;Case &quot;DJF&quot;                          'Country:  Djibouti         Currency : Djiboutian franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centimes&quot;&#xA;&#xA;&#xA;Case &quot;XCD&quot;                          'Country:  Dominica         Currency : East Caribbean dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;DOP&quot;                          'Country:  Dominican Republic         Currency : Dominican peso&#xA;Country_currency = &quot;Peso&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavos&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Ecuador         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EGP&quot;                          'Country:  Egypt         Currency : Egyptian pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Piastre&quot;&#xA;Decimal_Plural = &quot;Piastres&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  El Salvador         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XAF&quot;                          'Country:  Equatorial Guinea         Currency : Central African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centimes&quot;&#xA;&#xA;&#xA;Case &quot;ERN&quot;                          'Country:  Eritrea         Currency : Eritrean nakfa&#xA;Country_currency = &quot;Nakfa&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Estonia         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;SZL&quot;                          'Country:  Eswatini (formerly Swaziland)         Currency : Swazi lilangeni&#xA;Country_currency = &quot;Lilangeni&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;ETB&quot;                          'Country:  Ethiopia         Currency : Ethiopian birr&#xA;Country_currency = &quot;Birr&quot;   &#xA;Decimal_Singular = &quot;Santim&quot;&#xA;Decimal_Plural = &quot;Santims&quot;&#xA;&#xA;&#xA;Case &quot;FKP&quot;                          'Country:  Falkland Islands (UK)         Currency : Falkland Islands pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;none&quot;                          'Country:  Faroe Islands (Denmark)         Currency : Faroese krona&#xA;Country_currency = &quot;Krona&quot;   &#xA;Decimal_Singular = &quot;Oyra&quot;&#xA;Decimal_Plural = &quot;Oyru&quot;&#xA;&#xA;&#xA;Case &quot;FJD&quot;                          'Country:  Fiji         Currency : Fijian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Finland         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  France         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  French Guiana (France)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XPF&quot;                          'Country:  French Polynesia (France)         Currency : CFP franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centimes&quot;&#xA;&#xA;&#xA;Case &quot;XAF&quot;                          'Country:  Gabon         Currency : Central African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centimes&quot;&#xA;&#xA;&#xA;Case &quot;GMD&quot;                          'Country:  Gambia         Currency : Gambian dalasi&#xA;Country_currency = &quot;Dalasi&quot;   &#xA;Decimal_Singular = &quot;Butut&quot;&#xA;Decimal_Plural = &quot;Bututs&quot;&#xA;&#xA;&#xA;Case &quot;GEL&quot;                          'Country:  Georgia         Currency : Georgian lari&#xA;Country_currency = &quot;Lari&quot;   &#xA;Decimal_Singular = &quot;Tetri&quot;&#xA;Decimal_Plural = &quot;Tetri&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Germany         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;GHS&quot;                          'Country:  Ghana         Currency : Ghanaian cedi&#xA;Country_currency = &quot;Cedi&quot;   &#xA;Decimal_Singular = &quot;Pesewa&quot;&#xA;Decimal_Plural = &quot;Pesewas&quot;&#xA;&#xA;&#xA;Case &quot;GIP&quot;                          'Country:  Gibraltar (UK)         Currency : Gibraltar pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Greece         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;DKK&quot;                          'Country:  Greenland (Denmark)         Currency : Danish krone&#xA;Country_currency = &quot;Krone&quot;   &#xA;Decimal_Singular = &quot;Ore&quot;&#xA;Decimal_Plural = &quot;Ore&quot;&#xA;&#xA;&#xA;Case &quot;XCD&quot;                          'Country:  Grenada         Currency : East Caribbean dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Guadeloupe (France)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Guam (USA)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;GTQ&quot;                          'Country:  Guatemala         Currency : Guatemalan quetzal&#xA;Country_currency = &quot;Quetzal&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavo&quot;&#xA;&#xA;&#xA;Case &quot;GGP&quot;                          'Country:  Guernsey (UK)         Currency : Guernsey Pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;GNF&quot;                          'Country:  Guinea         Currency : Guinean franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;XOF&quot;                          'Country:  Guinea-Bissau         Currency : West African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;GYD&quot;                          'Country:  Guyana         Currency : Guyanese dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;HTG&quot;                          'Country:  Haiti         Currency : Haitian gourde&#xA;Country_currency = &quot;Gourde&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;HNL&quot;                          'Country:  Honduras         Currency : Honduran lempira&#xA;Country_currency = &quot;Lempira&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavo&quot;&#xA;&#xA;&#xA;Case &quot;HKD&quot;                          'Country:  Hong Kong (China)         Currency : Hong Kong dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;HUF&quot;                          'Country:  Hungary         Currency : Hungarian forint&#xA;Country_currency = &quot;Forint&quot;   &#xA;Decimal_Singular = &quot;Filler&quot;&#xA;Decimal_Plural = &quot;Filler&quot;&#xA;&#xA;&#xA;Case &quot;ISK&quot;                          'Country:  Iceland         Currency : Icelandic krona&#xA;Country_currency = &quot;Krona&quot;   &#xA;Decimal_Singular = &quot;Eyrir&quot;&#xA;Decimal_Plural = &quot;Aurar&quot;&#xA;&#xA;&#xA;Case &quot;INR&quot;                          'Country:  India         Currency : Indian rupee&#xA;Country_currency = &quot;Rupee&quot;   &#xA;Decimal_Singular = &quot;Paise&quot;&#xA;Decimal_Plural = &quot;Paise&quot;&#xA;&#xA;&#xA;Case &quot;IDR&quot;                          'Country:  Indonesia         Currency : Indonesian rupiah&#xA;Country_currency = &quot;Rupiah&quot;   &#xA;Decimal_Singular = &quot;Sen&quot;&#xA;Decimal_Plural = &quot;Sen&quot;&#xA;&#xA;&#xA;Case &quot;IRR&quot;                          'Country:  Iran         Currency : Iranian rial&#xA;Country_currency = &quot;Rial&quot;   &#xA;Decimal_Singular = &quot;Dinar&quot;&#xA;Decimal_Plural = &quot;Dinars&quot;&#xA;&#xA;&#xA;Case &quot;IQD&quot;                          'Country:  Iraq         Currency : Iraqi dinar&#xA;Country_currency = &quot;Dinar&quot;   &#xA;Decimal_Singular = &quot;Fils&quot;&#xA;Decimal_Plural = &quot;Fils&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Ireland         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;IMP&quot;                          'Country:  Isle of Man (UK)         Currency : Manx pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;ILS&quot;                          'Country:  Israel         Currency : Israeli new shekel&#xA;Country_currency = &quot;Scheckel&quot;   &#xA;Decimal_Singular = &quot;Agora&quot;&#xA;Decimal_Plural = &quot;Agoras&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Italy         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;JMD&quot;                          'Country:  Jamaica         Currency : Jamaican dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;JPY&quot;                          'Country:  Japan         Currency : Japanese yen&#xA;Country_currency = &quot;Yen&quot;   &#xA;Decimal_Singular = &quot;Sen&quot;&#xA;Decimal_Plural = &quot;Sen&quot;&#xA;&#xA;&#xA;Case &quot;JEP&quot;                          'Country:  Jersey (UK)         Currency : Jersey pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;JOD&quot;                          'Country:  Jordan         Currency : Jordanian dinar&#xA;Country_currency = &quot;Dinar&quot;   &#xA;Decimal_Singular = &quot;Piastre&quot;&#xA;Decimal_Plural = &quot;Piastre&quot;&#xA;&#xA;&#xA;Case &quot;KZT&quot;                          'Country:  Kazakhstan         Currency : Kazakhstani tenge&#xA;Country_currency = &quot;Tenge&quot;   &#xA;Decimal_Singular = &quot;Tiin&quot;&#xA;Decimal_Plural = &quot;Tiin&quot;&#xA;&#xA;&#xA;Case &quot;KES&quot;                          'Country:  Kenya         Currency : Kenyan shilling&#xA;Country_currency = &quot;Shilling&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;AUD&quot;                          'Country:  Kiribati         Currency : Australian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Kosovo         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;KWD&quot;                          'Country:  Kuwait         Currency : Kuwaiti dinar&#xA;Country_currency = &quot;Dinar&quot;   &#xA;Decimal_Singular = &quot;Fils&quot;&#xA;Decimal_Plural = &quot;Fils&quot;&#xA;&#xA;&#xA;Case &quot;KGS&quot;                          'Country:  Kyrgyzstan         Currency : Kyrgyzstani som&#xA;Country_currency = &quot;Som&quot;   &#xA;Decimal_Singular = &quot;Tyiyn&quot;&#xA;Decimal_Plural = &quot;Tyiyns&quot;&#xA;&#xA;&#xA;Case &quot;LAK&quot;                          'Country:  Laos         Currency : Lao kip&#xA;Country_currency = &quot;Kip&quot;   &#xA;Decimal_Singular = &quot;Att&quot;&#xA;Decimal_Plural = &quot;Att&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Latvia         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;LBP&quot;                          'Country:  Lebanon         Currency : Lebanese pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Piastre&quot;&#xA;Decimal_Plural = &quot;Piastre&quot;&#xA;&#xA;&#xA;Case &quot;LSL&quot;                          'Country:  Lesotho         Currency : Lesotho loti&#xA;Country_currency = &quot;Loti&quot;   &#xA;Decimal_Singular = &quot;Sente&quot;&#xA;Decimal_Plural = &quot;Sente&quot;&#xA;&#xA;&#xA;Case &quot;LRD&quot;                          'Country:  Liberia         Currency : Liberian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;LYD&quot;                          'Country:  Libya         Currency : Libyan dinar&#xA;Country_currency = &quot;Dinar&quot;   &#xA;Decimal_Singular = &quot;Dirham&quot;&#xA;Decimal_Plural = &quot;Dirhams&quot;&#xA;&#xA;&#xA;Case &quot;CHF&quot;                          'Country:  Liechtenstein         Currency : Swiss franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Rappen&quot;&#xA;Decimal_Plural = &quot;Rappen&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Lithuania         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Luxembourg         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;MOP&quot;                          'Country:  Macau (China)         Currency : Macanese pataca&#xA;Country_currency = &quot;Pataca&quot;   &#xA;Decimal_Singular = &quot;Avo&quot;&#xA;Decimal_Plural = &quot;Avo&quot;&#xA;&#xA;&#xA;Case &quot;MKD&quot;                          'Country:  Macedonia (FYROM)         Currency : Macedonian denar&#xA;Country_currency = &quot;Denar&quot;   &#xA;Decimal_Singular = &quot;Deni&quot;&#xA;Decimal_Plural = &quot;Denari&quot;&#xA;&#xA;&#xA;Case &quot;MGA&quot;                          'Country:  Madagascar         Currency : Malagasy ariary&#xA;Country_currency = &quot;Ariary&quot;   &#xA;Decimal_Singular = &quot;Centimes&quot;&#xA;Decimal_Plural = &quot;Centimes&quot;&#xA;&#xA;&#xA;Case &quot;MWK&quot;                          'Country:  Malawi         Currency : Malawian kwacha&#xA;Country_currency = &quot;Kwacha&quot;   &#xA;Decimal_Singular = &quot;Tambala&quot;&#xA;Decimal_Plural = &quot;Tambala&quot;&#xA;&#xA;&#xA;Case &quot;MYR&quot;                          'Country:  Malaysia         Currency : Malaysian ringgit&#xA;Country_currency = &quot;Ringgit&quot;   &#xA;Decimal_Singular = &quot;Sen&quot;&#xA;Decimal_Plural = &quot;Sen&quot;&#xA;&#xA;&#xA;Case &quot;MVR&quot;                          'Country:  Maldives         Currency : Maldivian rufiyaa&#xA;Country_currency = &quot;Rufiyaa&quot;   &#xA;Decimal_Singular = &quot;Laari&quot;&#xA;Decimal_Plural = &quot;Laari&quot;&#xA;&#xA;&#xA;Case &quot;XOF&quot;                          'Country:  Mali         Currency : West African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Malta         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Marshall Islands         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Martinique (France)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;MRU&quot;                          'Country:  Mauritania         Currency : Mauritanian ouguiya&#xA;Country_currency = &quot;Ouguiya&quot;   &#xA;Decimal_Singular = &quot;&quot;&#xA;Decimal_Plural = &quot;&quot;&#xA;&#xA;&#xA;Case &quot;MUR&quot;                          'Country:  Mauritius         Currency : Mauritian rupee&#xA;Country_currency = &quot;Rupee&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Mayotte (France)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;MXN&quot;                          'Country:  Mexico         Currency : Mexican peso&#xA;Country_currency = &quot;Peso&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavo&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Micronesia         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;MDL&quot;                          'Country:  Moldova         Currency : Moldovan leu&#xA;Country_currency = &quot;Leu&quot;   &#xA;Decimal_Singular = &quot;Ban&quot;&#xA;Decimal_Plural = &quot;Bani&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Monaco         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;MNT&quot;                          'Country:  Mongolia         Currency : Mongolian tugrik&#xA;Country_currency = &quot;Tugrik&quot;   &#xA;Decimal_Singular = &quot;Mongo&quot;&#xA;Decimal_Plural = &quot;Mongo&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Montenegro         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XCD&quot;                          'Country:  Montserrat (UK)         Currency : East Caribbean dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;MAD&quot;                          'Country:  Morocco         Currency : Moroccan dirham&#xA;Country_currency = &quot;Dirham&quot;   &#xA;Decimal_Singular = &quot;Santim&quot;&#xA;Decimal_Plural = &quot;Santim&quot;&#xA;&#xA;&#xA;Case &quot;MZN&quot;                          'Country:  Mozambique         Currency : Mozambican metical&#xA;Country_currency = &quot;Metical&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavos&quot;&#xA;&#xA;&#xA;Case &quot;MMK&quot;                          'Country:  Myanmar (formerly Burma)         Currency : Myanmar kyat&#xA;Country_currency = &quot;Kyat&quot;   &#xA;Decimal_Singular = &quot;Pya&quot;&#xA;Decimal_Plural = &quot;Pya&quot;&#xA;&#xA;&#xA;Case &quot;NAD&quot;                          'Country:  Namibia         Currency : Namibian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;AUD&quot;                          'Country:  Nauru         Currency : Australian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;NPR&quot;                          'Country:  Nepal         Currency : Nepalese rupee&#xA;Country_currency = &quot;Rupee&quot;   &#xA;Decimal_Singular = &quot;Paise&quot;&#xA;Decimal_Plural = &quot;Paise&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Netherlands         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XPF&quot;                          'Country:  New Caledonia (France)         Currency : CFP franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;NZD&quot;                          'Country:  New Zealand         Currency : New Zealand dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;NIO&quot;                          'Country:  Nicaragua         Currency : Nicaraguan cordoba&#xA;Country_currency = &quot;Oro&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavo&quot;&#xA;&#xA;&#xA;Case &quot;XOF&quot;                          'Country:  Niger         Currency : West African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;NGN&quot;                          'Country:  Nigeria         Currency : Nigerian naira&#xA;Country_currency = &quot;Naira&quot;   &#xA;Decimal_Singular = &quot;Kobo&quot;&#xA;Decimal_Plural = &quot;Kobo&quot;&#xA;&#xA;&#xA;Case &quot;NZD&quot;                          'Country:  Niue (New Zealand)         Currency : New Zealand dollar&#xA;Country_currency = &quot;N.Zeal.Dollars&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;AUD&quot;                          'Country:  Norfolk Island (Australia)         Currency : Australian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Northern Mariana Islands (USA)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;KPW&quot;                          'Country:  North Korea         Currency : North Korean won&#xA;Country_currency = &quot;Won&quot;   &#xA;Decimal_Singular = &quot;Chon&quot;&#xA;Decimal_Plural = &quot;Chon&quot;&#xA;&#xA;&#xA;Case &quot;NOK&quot;                          'Country:  Norway         Currency : Norwegian krone&#xA;Country_currency = &quot;Krone&quot;   &#xA;Decimal_Singular = &quot;Ore&quot;&#xA;Decimal_Plural = &quot;Øre&quot;&#xA;&#xA;&#xA;Case &quot;OMR&quot;                          'Country:  Oman         Currency : Omani rial&#xA;Country_currency = &quot;Omani Rial&quot;   &#xA;Decimal_Singular = &quot;Baisa&quot;&#xA;Decimal_Plural = &quot;Baisa&quot;&#xA;&#xA;&#xA;Case &quot;PKR&quot;                          'Country:  Pakistan         Currency : Pakistani rupee&#xA;Country_currency = &quot;Rupee&quot;   &#xA;Decimal_Singular = &quot;Paise&quot;&#xA;Decimal_Plural = &quot;Paise&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Palau         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;ILS&quot;                          'Country:  Palestine         Currency : Israeli new shekel&#xA;Country_currency = &quot;Scheckel&quot;   &#xA;Decimal_Singular = &quot;Agora&quot;&#xA;Decimal_Plural = &quot;Agoras&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Panama         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;PGK&quot;                          'Country:  Papua New Guinea         Currency : Papua New Guinean kina&#xA;Country_currency = &quot;Kina&quot;   &#xA;Decimal_Singular = &quot;Toea&quot;&#xA;Decimal_Plural = &quot;Toea&quot;&#xA;&#xA;&#xA;Case &quot;PYG&quot;                          'Country:  Paraguay         Currency : Paraguayan guarani&#xA;Country_currency = &quot;Guarani&quot;   &#xA;Decimal_Singular = &quot;Centimo&quot;&#xA;Decimal_Plural = &quot;Centimo&quot;&#xA;&#xA;&#xA;Case &quot;PEN&quot;                          'Country:  Peru         Currency : Peruvian sol&#xA;Country_currency = &quot;Sol&quot;   &#xA;Decimal_Singular = &quot;Centimo&quot;&#xA;Decimal_Plural = &quot;Centimo&quot;&#xA;&#xA;&#xA;Case &quot;PHP&quot;                          'Country:  Philippines         Currency : Philippine peso&#xA;Country_currency = &quot;Peso&quot;   &#xA;Decimal_Singular = &quot;Centavo&quot;&#xA;Decimal_Plural = &quot;Centavos&quot;&#xA;&#xA;&#xA;Case &quot;NZD&quot;                          'Country:  Pitcairn Islands (UK)         Currency : New Zealand dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;PLN&quot;                          'Country:  Poland         Currency : Polish zloty&#xA;Country_currency = &quot;Zloty&quot;   &#xA;Decimal_Singular = &quot;Grosz&quot;&#xA;Decimal_Plural = &quot;Grosz&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Portugal         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Puerto Rico (USA)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;QAR&quot;                          'Country:  Qatar         Currency : Qatari riyal&#xA;Country_currency = &quot;Rial&quot;   &#xA;Decimal_Singular = &quot;Dirham&quot;&#xA;Decimal_Plural = &quot;Dirhams&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Reunion (France)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;RON&quot;                          'Country:  Romania         Currency : Romanian leu&#xA;Country_currency = &quot;Leu&quot;   &#xA;Decimal_Singular = &quot;Ban&quot;&#xA;Decimal_Plural = &quot;Bani&quot;&#xA;&#xA;&#xA;Case &quot;RUB&quot;                          'Country:  Russia         Currency : Russian ruble&#xA;Country_currency = &quot;Ruble&quot;   &#xA;Decimal_Singular = &quot;Kopek&quot;&#xA;Decimal_Plural = &quot;Kopek&quot;&#xA;&#xA;&#xA;Case &quot;RWF&quot;                          'Country:  Rwanda         Currency : Rwandan franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Saba (Netherlands)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Saint Barthelemy (France)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;SHP&quot;                          'Country:  Saint Helena (UK)         Currency : Saint Helena pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;XCD&quot;                          'Country:  Saint Kitts and Nevis         Currency : East Caribbean dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XCD&quot;                          'Country:  Saint Lucia         Currency : East Caribbean dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Saint Martin (France)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Saint Pierre and Miquelon (France)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XCD&quot;                          'Country:  Saint Vincent and the Grenadines         Currency : East Caribbean dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;WST&quot;                          'Country:  Samoa         Currency : Samoan tala&#xA;Country_currency = &quot;Tala&quot;   &#xA;Decimal_Singular = &quot;Sene&quot;&#xA;Decimal_Plural = &quot;Sene&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  San Marino         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;STN&quot;                          'Country:  Sao Tome and Principe         Currency : Sao Tome and Principe dobra&#xA;Country_currency = &quot;Dobra&quot;   &#xA;Decimal_Singular = &quot;Cêntimo&quot;&#xA;Decimal_Plural = &quot;Cêntimo&quot;&#xA;&#xA;&#xA;Case &quot;SAR&quot;                          'Country:  Saudi Arabia         Currency : Saudi Arabian riyal&#xA;Country_currency = &quot;Rial&quot;   &#xA;Decimal_Singular = &quot;Halalah&quot;&#xA;Decimal_Plural = &quot;Halalah&quot;&#xA;&#xA;&#xA;Case &quot;XOF&quot;                          'Country:  Senegal         Currency : West African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;RSD&quot;                          'Country:  Serbia         Currency : Serbian dinar&#xA;Country_currency = &quot;Dinar&quot;   &#xA;Decimal_Singular = &quot;Para&quot;&#xA;Decimal_Plural = &quot;Paras&quot;&#xA;&#xA;&#xA;Case &quot;SCR&quot;                          'Country:  Seychelles         Currency : Seychellois rupee&#xA;Country_currency = &quot;Rupee&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;SLL&quot;                          'Country:  Sierra Leone         Currency : Sierra Leonean leone&#xA;Country_currency = &quot;Leone&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;SGD&quot;                          'Country:  Singapore         Currency : Singapore dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Sint Eustatius (Netherlands)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;ANG&quot;                          'Country:  Sint Maarten (Netherlands)         Currency : Netherlands Antillean guilder&#xA;Country_currency = &quot;Guilder&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Slovakia         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Slovenia         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;SBD&quot;                          'Country:  Solomon Islands         Currency : Solomon Islands dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;SOS&quot;                          'Country:  Somalia         Currency : Somali shilling&#xA;Country_currency = &quot;Shilling&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;ZAR&quot;                          'Country:  South Africa         Currency : South African rand&#xA;Country_currency = &quot;Rand&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;GBP&quot;                          'Country:  South Georgia Island (UK)         Currency : Pound sterling&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;KRW&quot;                          'Country:  South Korea         Currency : South Korean won&#xA;Country_currency = &quot;Won&quot;   &#xA;Decimal_Singular = &quot;Jeon&quot;&#xA;Decimal_Plural = &quot;Jeon&quot;&#xA;&#xA;&#xA;Case &quot;SSP&quot;                          'Country:  South Sudan         Currency : South Sudanese pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Piaster&quot;&#xA;Decimal_Plural = &quot;Piasters&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Spain         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;LKR&quot;                          'Country:  Sri Lanka         Currency : Sri Lankan rupee&#xA;Country_currency = &quot;Rupee&quot;   &#xA;Decimal_Singular = &quot;Paise&quot;&#xA;Decimal_Plural = &quot;Paise&quot;&#xA;&#xA;&#xA;Case &quot;SDG&quot;                          'Country:  Sudan         Currency : Sudanese pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Qirsh&quot;&#xA;Decimal_Plural = &quot;Qirsh&quot;&#xA;&#xA;&#xA;Case &quot;SRD&quot;                          'Country:  Suriname         Currency : Surinamese dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;NOK&quot;                          'Country:  Svalbard and Jan Mayen (Norway)         Currency : Norwegian krone&#xA;Country_currency = &quot;Krone&quot;   &#xA;Decimal_Singular = &quot;Ore&quot;&#xA;Decimal_Plural = &quot;Ore&quot;&#xA;&#xA;&#xA;Case &quot;SEK&quot;                          'Country:  Sweden         Currency : Swedish krona&#xA;Country_currency = &quot;Krona&quot;   &#xA;Decimal_Singular = &quot;Ore&quot;&#xA;Decimal_Plural = &quot;Ore&quot;&#xA;&#xA;&#xA;Case &quot;CHF&quot;                          'Country:  Switzerland         Currency : Swiss franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Rappen&quot;&#xA;Decimal_Plural = &quot;Rappen&quot;&#xA;&#xA;&#xA;Case &quot;SYP&quot;                          'Country:  Syria         Currency : Syrian pound&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;TWD&quot;                          'Country:  Taiwan         Currency : New Taiwan dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;TJS&quot;                          'Country:  Tajikistan         Currency : Tajikistani somoni&#xA;Country_currency = &quot;Somoni&quot;   &#xA;Decimal_Singular = &quot;Diram&quot;&#xA;Decimal_Plural = &quot;Dirams&quot;&#xA;&#xA;&#xA;Case &quot;TZS&quot;                          'Country:  Tanzania         Currency : Tanzanian shilling&#xA;Country_currency = &quot;Shilling&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;THB&quot;                          'Country:  Thailand         Currency : Thai baht&#xA;Country_currency = &quot;Baht&quot;   &#xA;Decimal_Singular = &quot;Satang&quot;&#xA;Decimal_Plural = &quot;Satang&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Timor-Leste         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XOF&quot;                          'Country:  Togo         Currency : West African CFA franc&#xA;Country_currency = &quot;CFA Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;NZD&quot;                          'Country:  Tokelau (New Zealand)         Currency : New Zealand dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;TOP&quot;                          'Country:  Tonga         Currency : Tongan pa’anga&#xA;Country_currency = &quot;Pa’Anga&quot;   &#xA;Decimal_Singular = &quot;Seniti&quot;&#xA;Decimal_Plural = &quot;Seniti&quot;&#xA;&#xA;&#xA;Case &quot;TTD&quot;                          'Country:  Trinidad and Tobago         Currency : Trinidad and Tobago dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;GBP&quot;                          'Country:  Tristan da Cunha (UK)         Currency : Pound sterling&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;TND&quot;                          'Country:  Tunisia         Currency : Tunisian dinar&#xA;Country_currency = &quot;Dinar&quot;   &#xA;Decimal_Singular = &quot;Millime&quot;&#xA;Decimal_Plural = &quot;Millime&quot;&#xA;&#xA;&#xA;Case &quot;TRY&quot;                          'Country:  Turkey         Currency : Turkish lira&#xA;Country_currency = &quot;Lira&quot;   &#xA;Decimal_Singular = &quot;Kurus&quot;&#xA;Decimal_Plural = &quot;Kurus&quot;&#xA;&#xA;&#xA;Case &quot;TMT&quot;                          'Country:  Turkmenistan         Currency : Turkmen manat&#xA;Country_currency = &quot;Manat&quot;   &#xA;Decimal_Singular = &quot;Tenge&quot;&#xA;Decimal_Plural = &quot;Tenge&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Turks and Caicos Islands (UK)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;AUD&quot;                          'Country:  Tuvalu         Currency : Australian dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;UGX&quot;                          'Country:  Uganda         Currency : Ugandan shilling&#xA;Country_currency = &quot;Shilling&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;UAH&quot;                          'Country:  Ukraine         Currency : Ukrainian hryvnia&#xA;Country_currency = &quot;Hryvnia&quot;   &#xA;Decimal_Singular = &quot;Kopiyka&quot;&#xA;Decimal_Plural = &quot;Kopiyky&quot;&#xA;&#xA;&#xA;Case &quot;AED&quot;                          'Country:  United Arab Emirates         Currency : UAE dirham&#xA;Country_currency = &quot;Dirham&quot;   &#xA;Decimal_Singular = &quot;Fils&quot;&#xA;Decimal_Plural = &quot;Fils&quot;&#xA;&#xA;&#xA;Case &quot;GBP&quot;                          'Country:  United Kingdom         Currency : Pound sterling&#xA;Country_currency = &quot;Pound&quot;   &#xA;Decimal_Singular = &quot;Penny&quot;&#xA;Decimal_Plural = &quot;Pence&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  United States of America         Currency : United States dollar&#xA;Country_currency = &quot;U.S. Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;UYU&quot;                          'Country:  Uruguay         Currency : Uruguayan peso&#xA;Country_currency = &quot;Peso&quot;   &#xA;Decimal_Singular = &quot;Centesimo&quot;&#xA;Decimal_Plural = &quot;Centesimos&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  US Virgin Islands (USA)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;UZS&quot;                          'Country:  Uzbekistan         Currency : Uzbekistani som&#xA;Country_currency = &quot;Soʻm&quot;   &#xA;Decimal_Singular = &quot;Tiyin&quot;&#xA;Decimal_Plural = &quot;Tiyin&quot;&#xA;&#xA;&#xA;Case &quot;VUV&quot;                          'Country:  Vanuatu         Currency : Vanuatu vatu&#xA;Country_currency = &quot;Vatu&quot;   &#xA;Decimal_Singular = &quot;&quot;&#xA;Decimal_Plural = &quot;&quot;&#xA;&#xA;&#xA;Case &quot;EUR&quot;                          'Country:  Vatican City (Holy See)         Currency : European euro&#xA;Country_currency = &quot;Euro&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;VEF&quot;                          'Country:  Venezuela         Currency : Venezuelan bolivar&#xA;Country_currency = &quot;Bolivar Hard&quot;   &#xA;Decimal_Singular = &quot;Centimo&quot;&#xA;Decimal_Plural = &quot;Centimo&quot;&#xA;&#xA;&#xA;Case &quot;VND&quot;                          'Country:  Vietnam         Currency : Vietnamese dong&#xA;Country_currency = &quot;Dong&quot;   &#xA;Decimal_Singular = &quot;Hao&quot;&#xA;Decimal_Plural = &quot;Hao&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Wake Island (USA)         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;&#xA;Case &quot;XPF&quot;                          'Country:  Wallis and Futuna (France)         Currency : CFP franc&#xA;Country_currency = &quot;Franc&quot;   &#xA;Decimal_Singular = &quot;Centime&quot;&#xA;Decimal_Plural = &quot;Centime&quot;&#xA;&#xA;&#xA;Case &quot;YER&quot;                          'Country:  Yemen         Currency : Yemeni rial&#xA;Country_currency = &quot;Ryal&quot;   &#xA;Decimal_Singular = &quot;Fils&quot;&#xA;Decimal_Plural = &quot;Fils&quot;&#xA;&#xA;&#xA;Case &quot;ZMW&quot;                          'Country:  Zambia         Currency : Zambian kwacha&#xA;Country_currency = &quot;Kwacha&quot;   &#xA;Decimal_Singular = &quot;Ngwee&quot;&#xA;Decimal_Plural = &quot;Ngwee&quot;&#xA;&#xA;&#xA;Case &quot;USD&quot;                          'Country:  Zimbabwe         Currency : United States dollar&#xA;Country_currency = &quot;Dollar&quot;   &#xA;Decimal_Singular = &quot;Cent&quot;&#xA;Decimal_Plural = &quot;Cents&quot;&#xA;&#xA;Case Else : &#xA;&#xA;Country_currency = &quot;&quot;   &#xA;Decimal_Singular = &quot;&quot;&#xA;Decimal_Plural = &quot;&quot;&#xA;&#xA;End Select&#xA;&#xA;&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;&#xA;&#xA;'''''''''''' COUNTRY TYPE AND CURRENCY ENDS HERE '''''''''''''''''''''&#xA;&#xA;&#xA;&#xA;''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''&#xA;''' &#xA;' Assign money currency before decimal&#xA;Select Case Amt_Before_Decimal.replace(&quot; &quot;,&quot;&quot;)&#xA;        Case &quot;&quot;&#xA;            Amt_Before_Decimal = &quot;&quot;&#xA;        Case &quot;One&quot;&#xA;            Amt_Before_Decimal = &quot;One &quot; + StrConv(Country_currency,vbProperCase)&#xA;        Case Else&#xA;End Select&#xA;&#xA;If Country_currency.Equals(&quot;&quot;) Then&#xA;          Amt_Before_Decimal = LTrim(Amt_Before_Decimal) + &quot; only&quot;&#xA;     Else&#xA;&#x9;&#x9; Amt_Before_Decimal = LTrim(Amt_Before_Decimal) + Country_currency&#xA;End If&#xA;&#xA;Console.WriteLine(&quot;Amt Before Dec: &quot; + Amt_Before_Decimal)&#xA;&#xA;'Get value for after decimal&#xA;If Amt_Before_Decimal.Equals(&quot;&quot;) Then&#xA;&#x9;If Amt_After_Decimal.Equals(&quot;&quot;) Then&#xA;&#x9;&#x9;Num2Word = &quot;&quot;&#xA;&#x9;Else If Amt_After_Decimal.Equals(&quot;1&quot;) Then&#xA;&#x9;&#x9;Num2Word = Amt_After_Decimal + &quot; &quot; + Decimal_Singular +&quot; only&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;Num2Word = Amt_After_Decimal + &quot; &quot; + Decimal_Plural +&quot; only&quot;&#xA;&#x9;End If&#xA;&#x9;Else&#xA;&#x9;If Amt_After_Decimal.Equals(&quot;&quot;) Then&#xA;&#x9;&#x9;Num2Word = Amt_Before_Decimal&#xA;&#x9;Else If Amt_After_Decimal.Equals(&quot;1&quot;) Then&#xA;&#x9;&#x9;Num2Word = Amt_Before_Decimal + &quot; and &quot; + Amt_After_Decimal + &quot; &quot; + Decimal_Singular +&quot; only&quot;&#xA;&#x9;Else&#xA;&#x9;&#x9;Num2Word = Amt_Before_Decimal + &quot; and &quot; + Amt_After_Decimal + &quot; &quot; + Decimal_Plural +&quot; only&quot;&#xA;&#x9;End If&#xA;End If&#xA; &#xA;Console.WriteLine(&quot;Amt After Decimal: &quot; + Num2Word)" DisplayName="Invoke Code For Value in Words" sap:VirtualizedContainerService.HintSize="696,174" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
                                                  <ui:InvokeCode.Arguments>
                                                    <InArgument x:TypeArguments="x:String" x:Key="MyNumber">[total_Value]</InArgument>
                                                    <InArgument x:TypeArguments="x:String" x:Key="Curr_Type">[curr_type]</InArgument>
                                                    <OutArgument x:TypeArguments="x:String" x:Key="Num2Word">[amount_in_words]</OutArgument>
                                                  </ui:InvokeCode.Arguments>
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ui:InvokeCode>
                                                <ueab:WriteCellX Cell="[Excel.Sheet(&quot;Sheet1&quot;).Cell(&quot;C&quot; + (row_count+18-1).ToString)]" DisplayName="Write Cell" sap:VirtualizedContainerService.HintSize="696,168" sap2010:WorkflowViewState.IdRef="WriteCellX_27" Value="[amount_in_words]">
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ueab:WriteCellX>
                                                <ueab:InvokeVBAX Result="{x:Null}" CodeFilePath="DocumentProcessing\Outputs\Save_PDF.txt" DisplayName="Invoke VBA" EntryMethodName="SaveActiveSheetsAsPDF" sap:VirtualizedContainerService.HintSize="696,309" sap2010:WorkflowViewState.IdRef="InvokeVBAX_1" Workbook="[Excel]">
                                                  <ueab:InvokeVBAX.Body>
                                                    <ActivityAction>
                                                      <Sequence DisplayName="Do" sap2010:WorkflowViewState.IdRef="Sequence_63">
                                                        <sap:WorkflowViewStateService.ViewState>
                                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                          </scg:Dictionary>
                                                        </sap:WorkflowViewStateService.ViewState>
                                                      </Sequence>
                                                    </ActivityAction>
                                                  </ueab:InvokeVBAX.Body>
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ueab:InvokeVBAX>
                                                <Assign sap:VirtualizedContainerService.HintSize="696,70" sap2010:WorkflowViewState.IdRef="Assign_30">
                                                  <Assign.To>
                                                    <OutArgument x:TypeArguments="x:String">[outputFile]</OutArgument>
                                                  </Assign.To>
                                                  <Assign.Value>
                                                    <InArgument x:TypeArguments="x:String">[System.IO.Path.GetFileNameWithoutExtension(in_file_output)]</InArgument>
                                                  </Assign.Value>
                                                </Assign>
                                                <ueab:InvokeVBAX Result="{x:Null}" CodeFilePath="DocumentProcessing\Outputs\Landscape_PDF.txt" DisplayName="Invoke VBA" EntryMethodName="CompileReport" sap:VirtualizedContainerService.HintSize="696,502" sap2010:WorkflowViewState.IdRef="InvokeVBAX_2" Workbook="[Excel]">
                                                  <ueab:InvokeVBAX.Body>
                                                    <ActivityAction>
                                                      <Sequence DisplayName="Do" sap2010:WorkflowViewState.IdRef="Sequence_64">
                                                        <sap:WorkflowViewStateService.ViewState>
                                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                          </scg:Dictionary>
                                                        </sap:WorkflowViewStateService.ViewState>
                                                        <ueab:InvokeVBAArgumentX ArgumentValue="[docName]" DisplayName="VBA Argument" sap:VirtualizedContainerService.HintSize="390,94" sap2010:WorkflowViewState.IdRef="InvokeVBAArgumentX_2" />
                                                        <ueab:InvokeVBAArgumentX ArgumentValue="[outputFile]" DisplayName="VBA Argument" sap:VirtualizedContainerService.HintSize="390,94" sap2010:WorkflowViewState.IdRef="InvokeVBAArgumentX_3" />
                                                      </Sequence>
                                                    </ActivityAction>
                                                  </ueab:InvokeVBAX.Body>
                                                </ueab:InvokeVBAX>
                                                <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="696,61" sap2010:WorkflowViewState.IdRef="CommentOut_1">
                                                  <ui:CommentOut.Body>
                                                    <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="476,258" sap2010:WorkflowViewState.IdRef="Sequence_65">
                                                      <sap:WorkflowViewStateService.ViewState>
                                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                                        </scg:Dictionary>
                                                      </sap:WorkflowViewStateService.ViewState>
                                                      <ueab:SaveAsPdfX EndPage="{x:Null}" StartPage="{x:Null}" DestinationPdfPath="[in_file_output.Split(&quot;.&quot;c)(0).ToString + &quot;_&quot; + docName + &quot;.pdf&quot;]" DisplayName="Save Excel File As PDF" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="SaveAsPdfX_1" SaveQuality="StandardQuality" Workbook="[Excel]">
                                                        <sap:WorkflowViewStateService.ViewState>
                                                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                                          </scg:Dictionary>
                                                        </sap:WorkflowViewStateService.ViewState>
                                                      </ueab:SaveAsPdfX>
                                                    </Sequence>
                                                  </ui:CommentOut.Body>
                                                  <sap:WorkflowViewStateService.ViewState>
                                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                                                    </scg:Dictionary>
                                                  </sap:WorkflowViewStateService.ViewState>
                                                </ui:CommentOut>
                                              </Sequence>
                                            </ActivityAction>
                                          </ueab:ExcelApplicationCard.Body>
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                        </ueab:ExcelApplicationCard>
                                      </Sequence>
                                    </ActivityAction>
                                  </ueab:ExcelProcessScopeX.Body>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ueab:ExcelProcessScopeX>
                              </Sequence>
                            </ui:IfElseIfBlock.Then>
                          </ui:IfElseIfBlock>
                        </sc:BindingList>
                      </ui:IfElseIf.ConditionBlocks>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:IfElseIf>
                  </Sequence>
                </ActivityAction>
              </ui:ForEach.Body>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:ForEach>
          </Sequence>
          <p8:TrainClassifiersScope HumanValidatedData="{x:Null}" DisplayName="Train Classifiers Scope" DocumentObjectModel="[dom]" DocumentPath="[in_file_input.ToString]" DocumentText="[documentText]" sap:VirtualizedContainerService.HintSize="1081,384" HumanValidatedClassificationData="[validatedClassificationResult]" sap2010:WorkflowViewState.IdRef="TrainClassifiersScope_1" Taxonomy="[taxonomy]" TaxonomyConfiguration="{}{&quot;TaxonomyMappings&quot;:{&quot;UI2b6c4e884bd14a78846f8fea35555955&quot;:{&quot;DocumentTypeMappings&quot;:{&quot;Business.PurchaseOrder.QuoteExtraction&quot;:{&quot;OriginalDocumentTypeId&quot;:&quot;Business.PurchaseOrder.QuoteExtraction&quot;,&quot;ClassifierDocumentTypeId&quot;:null,&quot;IsDocumentTypeIdMapped&quot;:true}}}},&quot;ClassifierMinimumConfidence&quot;:{&quot;UI2b6c4e884bd14a78846f8fea35555955&quot;:&quot;0&quot;},&quot;DocumentTypesByPersistenceId&quot;:{}}">
            <p8:TrainClassifiersScope.Trainables>
              <p8:KeywordBasedClassifierTrainer LearningData="{x:Null}" PredictionId="{x:Null}" DisplayName="Keyword Based Classifier Trainer" sap:VirtualizedContainerService.HintSize="253,123" sap2010:WorkflowViewState.IdRef="KeywordBasedClassifierTrainer_1" LearningFilePath="DocumentProcessing\classifier.json" PersistenceId="UI2b6c4e884bd14a78846f8fea35555955">
                <p8:KeywordBasedClassifierTrainer.DocumentObjectModel>
                  <InArgument x:TypeArguments="p3:Document">
                    <DelegateArgumentValue x:TypeArguments="p3:Document">
                      <DelegateInArgument x:TypeArguments="p3:Document" Name="DocumentObjectModel" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p8:KeywordBasedClassifierTrainer.DocumentObjectModel>
                <p8:KeywordBasedClassifierTrainer.DocumentPath>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentPath" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p8:KeywordBasedClassifierTrainer.DocumentPath>
                <p8:KeywordBasedClassifierTrainer.DocumentText>
                  <InArgument x:TypeArguments="x:String">
                    <DelegateArgumentValue x:TypeArguments="x:String">
                      <DelegateInArgument x:TypeArguments="x:String" Name="DocumentText" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p8:KeywordBasedClassifierTrainer.DocumentText>
                <p8:KeywordBasedClassifierTrainer.HumanValidatedData>
                  <InArgument x:TypeArguments="p5:ExtractionResult[]">
                    <DelegateArgumentValue x:TypeArguments="p5:ExtractionResult[]">
                      <DelegateInArgument x:TypeArguments="p5:ExtractionResult[]" Name="HumanValidatedData" />
                    </DelegateArgumentValue>
                  </InArgument>
                </p8:KeywordBasedClassifierTrainer.HumanValidatedData>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </p8:KeywordBasedClassifierTrainer>
            </p8:TrainClassifiersScope.Trainables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </p8:TrainClassifiersScope>
        </Sequence>
      </If.Then>
      <If.Else>
        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,101" sap2010:WorkflowViewState.IdRef="LogMessage_42" Level="Info" Message="[&quot;Consuming the extraction results for document &lt;&quot; + docName + &quot;&gt; is  not possible!&quot;]">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:LogMessage>
      </If.Else>
    </If>
  </Sequence>
</Activity>